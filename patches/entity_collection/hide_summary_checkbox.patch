diff --git a/docroot/sites/all/modules/contrib/entity_collection/entity_collection.admin.inc b/docroot/sites/all/modules/contrib/entity_collection/entity_collection.admin.inc
index 07c38dee9..a9b1af708 100644
--- a/docroot/sites/all/modules/contrib/entity_collection/entity_collection.admin.inc
+++ b/docroot/sites/all/modules/contrib/entity_collection/entity_collection.admin.inc
@@ -219,6 +219,7 @@ function entity_collection_form_validate($form, &$form_state) {
   $entity_collection->name = $form_state['values']['name'];
   $entity_collection->title = $form_state['values']['title'];
   $entity_collection->style = $form_state['values']['style'];
+  $entity_collection->hide_summary = $form_state['values']['hide_summary'];
   $entity_collection->row = $form_state['values']['row'];
   field_attach_form_validate('entity_collection', $entity_collection, $form, $form_state);
 }
@@ -423,6 +424,11 @@ function entity_collection_content_form_content(EntityCollection $entity_collect
         '#options' => $row->getOptions($child->type, $child->content),
       );
     }
+    $form['content'][$key]['hide_summary'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Hide intro text'),
+      '#default_value' => $child->hide_summary,
+    );
     $form['content'][$key]['operations'] = array(
       '#type' => 'markup',
       '#markup' => implode(' | ', $links),
@@ -463,12 +469,12 @@ function entity_collection_content_build_tree($entity_collection, $values) {
     }
     // If the we have no parent, we can insert the item on the root.
     if (empty($value['parent'])) {
-      $tree->addChild($value['type'], $value['entity_id'], $entity, $value['style'], $value['key'], $value['position']);
+      $tree->addChild($value['type'], $value['entity_id'], $entity, $value['style'], $value['hide_summary'], $value['key'], $value['position']);
     }
     // If we have a parent and that parent is already inserted,
     // add it to that node,
     elseif (!empty($value['parent']) && $parent = $tree->getChild($value['parent'])) {
-      $parent->addChild($value['type'], $value['entity_id'], $entity, $value['style'], $value['key'], $value['position']);
+      $parent->addChild($value['type'], $value['entity_id'], $entity, $value['style'], $value['hide_summary'], $value['key'], $value['position']);
     }
     // Push the value onto our array again and try again.
     else {
@@ -504,13 +510,14 @@ function theme_entity_collection_content_form(&$variables) {
       $operations = drupal_render($form['content'][$key]['operations']);
       $position = drupal_render($form['content'][$key]['position']);
       $style = drupal_render($form['content'][$key]['style']);
+      $hide_summary = drupal_render($form['content'][$key]['hide_summary']);
       $rendered_key = drupal_render($form['content'][$key]['key']);
       $parent = drupal_render($form['content'][$key]['parent']);
       $depth = drupal_render($form['content'][$key]['depth']);
       $indentation = $form['content'][$key]['depth']['#default_value'] > 0 ? theme('indentation', array('size' => $form['content'][$key]['depth']['#default_value'])) : '';
       $data = array($indentation . $title . $parent . $depth . $rendered_key, $position);
       if ($form['#row']->useStylePerRow()) {
-        $data[] = $style;
+        $data[] = $style . $hide_summary;
       }
       $data[] = $operations;
       $rows[] = array('class' => array('draggable'), 'data' => $data);
diff --git a/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/entity_collection_db.install b/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/entity_collection_db.install
index 29c5b2062..9d93dfa19 100644
--- a/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/entity_collection_db.install
+++ b/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/entity_collection_db.install
@@ -67,7 +67,13 @@ function entity_collection_db_schema() {
       'contexts' => array(
         'type' => 'varchar',
         'length' => 255,
-        'description' => 'The contexts used.'
+        'description' => 'The contexts used.',
+      ),
+      'hide_summary' => array(
+        'description' => 'Hide intro text',
+        'type' => 'int',
+        'default' => NULL,
+        'not null' => FALSE,
       ),
     ),
     'primary key' => array('rsid'),
@@ -79,3 +85,18 @@ function entity_collection_db_schema() {
   );
   return $schema;
 }
+
+/**
+ * MDR-2206 OSHmail: Checkbox to decide to display the intro text or not.
+ */
+function entity_collection_db_update_7001() {
+  if (!db_field_exists('entity_collection_storage', 'hide_summary')) {
+    $field = array(
+      'description' => 'Hide intro text',
+      'type' => 'int',
+      'default' => NULL,
+      'not null' => FALSE,
+    );
+    db_add_field('entity_collection_storage', 'hide_summary', $field);
+  }
+}
diff --git a/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/plugins/entity_collection_storage/db.inc b/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/plugins/entity_collection_storage/db.inc
index 95cf635ff..f108e3f01 100644
--- a/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/plugins/entity_collection_storage/db.inc
+++ b/docroot/sites/all/modules/contrib/entity_collection/entity_collection_db/plugins/entity_collection_storage/db.inc
@@ -82,6 +82,7 @@ class EntityCollectionStorageDB extends EntityCollectionStorage {
       $record->eid = $item->entity_id;
       $record->depth = $depth;
       $record->style = $item->style;
+      $record->hide_summary = $item->hide_summary;
       $record->parent = isset($item->parent) && isset($item->parent->key) ? $item->parent->key : 0;
       $record->position = $item->position;
       $record->contexts = $this->serializeContexts($contexts);
@@ -166,7 +167,7 @@ class EntityCollectionStorageDB extends EntityCollectionStorage {
       if (!empty($bundle->settings['store_entity'])) {
         $entity = unserialize($value->entity);
       }
-      $node->addChild($value->entity_type, $value->eid, $entity, $value->style, $value->rsid, $value->position);
+      $node->addChild($value->entity_type, $value->eid, $entity, $value->style, $value->hide_summary, $value->rsid, $value->position);
     }
     // Load all entities
     // and make sure we only do as few entity_loads as possible.
diff --git a/docroot/sites/all/modules/contrib/entity_collection/includes/tree.inc b/docroot/sites/all/modules/contrib/entity_collection/includes/tree.inc
index 3dd45c712..25667e700 100644
--- a/docroot/sites/all/modules/contrib/entity_collection/includes/tree.inc
+++ b/docroot/sites/all/modules/contrib/entity_collection/includes/tree.inc
@@ -53,9 +53,10 @@ class EntityCollectionTreeNode {
    * @param string $name
    * @param stdClass $content
    */
-  public function addChild($type, $entity_id, $content, $style = NULL, $key = NULL, $position = NULL) {
+  public function addChild($type, $entity_id, $content, $style = NULL, $hide_summary = NULL, $key = NULL, $position = NULL) {
     $node = new EntityCollectionTreeNode($type, $entity_id, $content, $style);
     $node->position = isset($position) ? $position : count($this->children);
+    $node->hide_summary = $hide_summary;
     $node->parent = $this;
     return $this->addChildNode($node);
   }
