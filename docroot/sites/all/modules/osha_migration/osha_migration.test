<?php

class OshaMigrationsTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OSHA migrations tests',
      'description' => 'Tests functionalities provided by this module',
      'group' => 'OSHA',
    );
  }

  public function setUp() {
    parent::setUp('osha', 'osha_migration');
  }

  /**
   * Tests TaxonomyNaceCodes
   */
  public function testNaceCodesMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(TAXONOMY_NACE_CODES);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/nace_codes.json';
    $json = json_decode(file_get_contents($source_file), TRUE);
    $result = $this->runMigration(
      MIGRATION_TAXONOMY_NACE_CODES,
      'MigrateOshaNaceCodesTaxonomy',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witnesses = array();
    foreach ($json as $arr) {
      $code = $arr['NACE_REV_2_CODE'];
      $witnesses[$code] = $arr;
    }

    $weights = array("01" => 1, "01.1" => 1, "A" => 0);
    $parents = array("01" => 1, "01.1" => 1, "A" => 0);

    $field_mappings = MigrateOshaNaceCodesTaxonomy::getSourceDestinationFieldMappings();
    // Test each node field value in all languages
    foreach ($terms as $term) {
      $code = $term->field_nace_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach ($field_mappings as $language => $mapping) {
        foreach ($mapping as $dest_field => $source_field) {
          if(!empty($source[$source_field])) {
            $subject = $term->{$dest_field}[$language][0]['value'];
            $this->assertEqual(
              $source[$source_field],
              $subject,
              sprintf('Invalid "%s" translation for "%s.%s"', $language, $code, $source_field)
            );
          }
        }
      }
      $this->assertEqual($weights[$code], $term->weight,
        sprintf('Wrong weight for term %s', $code)
      );
      $actual_parents = taxonomy_get_parents($term->tid);
      $this->assertEqual($parents[$code], count($actual_parents));
    }
    Migration::deregisterMigration(MIGRATION_TAXONOMY_NACE_CODES);
  }

  /**
   * Tests the Esener Migration
   */
  public function testEsenerMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(TAXONOMY_ESENER);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/esener.json';
    $json = json_decode(file_get_contents($source_file), TRUE);
    $result = $this->runMigration(
      MIGRATION_TAXONOMY_ESENER,
      'MigrateOshaTaxonomyEsener',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witnesses = array();
    foreach ($json as $arr) {
      $code = $arr['code'];
      $witnesses[$code] = $arr;
    }

    $parents = array("indicator" => 0, "ghsme" => 1, 'mm154' => 1);
    // Test node name_field value in all languages
    $languages = array_keys(language_list());
    foreach ($terms as $term) {
      $code = $term->field_esener_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach($languages as $language) {
        if(!empty($source[$language])) {
          $this->assertEqual(
            $source[$language],
            $term->name_field[$language][0]['value'],
            sprintf('Invalid "%s" translation for "%s.name_field"', $language, $code)
          );
        }
      }
      $actual_parents = taxonomy_get_parents($term->tid);
      $this->assertEqual($parents[$code], count($actual_parents));
    }
    Migration::deregisterMigration(MIGRATION_TAXONOMY_ESENER);
  }


  /**
   * Tests the PublicationTypes Migration
   */
  public function testPublicationTypesMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(TAXONOMY_PUBLICATION_TYPES);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/publication_types.json';
    $json = json_decode(file_get_contents($source_file), TRUE);
    $result = $this->runMigration(
      MIGRATION_TAXONOMY_PUBLICATION_TYPES,
      'MigrateOshaTaxonomyPublicationTypes',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witnesses = array();
    foreach ($json as $arr) {
      $code = $arr['code'];
      $witnesses[$code] = $arr;
    }

    // Test node name_field value in all languages
    $languages = array_keys(language_list());
    foreach ($terms as $term) {
      $code = $term->field_publication_type_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach($languages as $language) {
        if(!empty($source[$language])) {
          $this->assertEqual(
            $source[$language],
            $term->name_field[$language][0]['value'],
            sprintf('Invalid "%s" translation for "%s.name_field"', $language, $code)
          );
        }
      }
    }
    Migration::deregisterMigration(MIGRATION_TAXONOMY_PUBLICATION_TYPES);
  }

  /**
   * Tests for the Thesaurus Migration
   */
  public function testThesaurusMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(TAXONOMY_THESAURUS);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/thesaurus2.json';
    $result = $this->runMigration(
      MIGRATION_TAXONOMY_THESAURUS,
      'MigrateOshaTaxonomyThesaurus',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(2, count($terms));

    $translations = array(
      "European organisations" => array(
        "name_field" => 23,
        "description_field" => 23
      ),
      "Senior Labour Inspectors Committee" => array(
        "name_field" => 23,
        "description_field" => 23
      )
    );

    $parentRelations = array(
      "Senior Labour Inspectors Committee" => "European organisations",
      "European organisations" => NULL
    );

    foreach ($terms as $term) {
      $this->assertTranslations($translations, $term);

      $parents = taxonomy_get_parents($term->tid);
      switch ($term->name) {
        case 'European organisations':
          $this->assertEqual(0, count($parents));
          break;
        default:
          $this->assertEqual(1, count($parents));
          $p = array_pop($parents);
          $this->assertEqual($parentRelations[$term->name], $p->name);
          break;
      }
    }
    Migration::deregisterMigration(MIGRATION_TAXONOMY_THESAURUS);
  }

  public function testTagsMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(TAXONOMY_TAGS);
    $source_file = drupal_get_path('module', 'osha_migration') . '/data/tags.json';
    $json = json_decode(file_get_contents($source_file), TRUE);

    $result = $this->runMigration(
      MIGRATION_TAXONOMY_TAGS,
      'MigrateOshaTaxonomyTags',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witness = array();
    foreach($json as $arr) {
      $code = $arr['code'];
      $witness[$code] = count(array_filter($arr)) - 1;
    }

    foreach($terms as $term) {
      $code = $term->field_tags_code[LANGUAGE_NONE][0]['value'];
      $this->assertEqual(
        $witness[$code], count($term->name_field),
        sprintf('Invalid translations for %s.%s (%s != %s)',
          $term->name, 'name_field', $witness[$code], count($term->name_field))
      );
    }
    Migration::deregisterMigration(MIGRATION_TAXONOMY_TAGS);
  }

  private function assertTranslations($translations, $term) {
    try {
    $items = $translations[$term->name];
    foreach ($items as $field => $count) {
      $c = count($term->$field);
      $this->assertEqual($count, $c,
        sprintf('Translations for %s.%s are invalid (%s != %s)', $term->name, $field, $count, $c)
      );
    }
    } catch(Exception $e) {
      var_dump(debug_backtrace());
    }
  }

  private function runMigration($machineName, $className, $fileName) {
    Migration::registerMigration(
      $className,
      $machineName,
      array(
        'group_name' => 'OSHA TEST MIGRATIONS',
        'file_name' => $fileName
      )
    );
    $migration = Migration::getInstance($machineName);
    return $migration->processImport();
  }
}