<?php

/**
 * Class MigrateOshaNewsTest tests news content type migration
 */
class MigrateOshaNewsTest extends DrupalWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'OSHA news migration testing',
      'description' => 'Tests the News migration',
      'group' => 'OSHA',
    );
  }

  /**
   * Set environment.
   *
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    /* We enable osha_migration after standard profile installation! */
    module_enable(array('osha_migration'));
    cache_clear_all();
    module_load_include('inc', 'osha_migration', 'utils.api');
    $cfg = MigrationUtil::getProjectConfig();
    variable_set('osha_data_dir', $cfg['variables']['osha_data_dir']);
  }

  /**
   * Test the migration.
   */
  public function testMigration() {
    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/thesaurus.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_THESAURUS, 'MigrateOshaTaxonomyThesaurus', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/tags.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_TAGS, 'MigrateOshaTaxonomyTags', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/news.txt';
    $result = MigrationUtil::runMigration(OSHA_MIGRATION_CONTENT_TYPE_NEWS, 'MigrateOshaNews', $source_file);

    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', OSHA_NEWS_CONTENT_TYPE_NEWS)
      ->propertyCondition('status', 1);
    $result = $query->execute();
    $nodes = array();
    if (isset($result['node'])) {
      $nodes_nids = array_keys($result['node']);
      $nodes = entity_load('node', $nodes_nids);
    }

    $class = new NewsContentListCSV($source_file);
    $class->getIdList();
    $data = $class::$data;
    // One item is broken, one is good.
    $this->assertEqual(1, count($nodes));

    foreach ($nodes as $node) {
      $path = path_load('node/' . $node->nid);
      $path = $path['alias'];
      $witness = $data[$path];

      $this->assertEqual(strtotime($witness['creation_date']), $node->created);
      $this->assertEqual(strtotime($witness['modification_date']), $node->changed);
      $this->assertEqual(
        strtotime($witness['publication_date']),
        strtotime($node->field_news_publication_date['und'][0]['value'])
      );
      foreach ($witness['title'] as $lang => $title) {
        $this->assertEqual($title, $node->title_field[$lang][0]['value']);
        /* TODO: Test body and tags */
        $this->assertEqual(
          str_replace('<@#&>', '"', $witness['description'][$lang]),
          $node->field_news_summary[$lang][0]['value']
        );
      }
    }
  }
}
