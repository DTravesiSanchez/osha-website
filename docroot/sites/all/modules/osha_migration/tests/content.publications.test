<?php

/**
 * Class MigrateOshaPublicationTest tests publication content type migration.
 */
class MigrateOshaPublicationTest extends DrupalWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Publications migration',
      'description' => 'Tests the migration of publications content',
      'group' => 'OSHA',
    );
  }

  /**
   * Set environment.
   *
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('path', 'pathauto', 'views', 'osha', 'osha_taxonomies', 'osha_publication', 'osha_migration');
    $cfg = MigrationUtil::getProjectConfig();
    variable_set('osha_data_dir', $cfg['variables']['osha_data_dir']);
  }

  /**
   * Test the migration.
   */
  public function testMigration() {
    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/nace_codes.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_NACE_CODES, 'MigrateOshaTaxonomyNaceCodes', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/thesaurus.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_THESAURUS, 'MigrateOshaTaxonomyThesaurus', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/tags.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_TAGS, 'MigrateOshaTaxonomyTags', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/publications.txt';
    $result = MigrationUtil::runMigration(OSHA_MIGRATION_CONTENT_TYPE_PUBLICATION, 'OshaMigratePublications', $source_file);

    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', OSHA_PUBLICATION_CONTENT_TYPE_PUBLICATION)
      ->propertyCondition('status', 1);
    $result = $query->execute();
    $nodes = array();
    if (isset($result['node'])) {
      $nodes_nids = array_keys($result['node']);
      $nodes = entity_load('node', $nodes_nids);
    }

    $class = new PublicationMigrateListCSV(
      $source_file,
      array('title', 'description', 'order_id', 'file')
    );
    $class->getIdList();
    $data = $class::$csvData;
    $this->assertEqual(count($data), count($nodes));

    foreach ($nodes as $node) {
      $path = path_load('node/' . $node->nid);
      $path = $path['alias'];
      $witness = $data[$path];

      $this->assertEqual(strtotime($witness['creation_date']), $node->created);
      $this->assertEqual(strtotime($witness['modification_date']), $node->changed);

      $this->assertEqual(
        strtotime($witness['publication_date']),
        strtotime($node->field_publication_date['und'][0]['value'])
      );

      $this->assertEqual(
        $witness['author'],
        $node->field_publication_author['und'][0]['value']
      );

      foreach ($witness['title'] as $lang => $title) {
        $this->assertEqual($title, $node->title_field[$lang][0]['value']);
        $this->assertEqual(
          $witness['order_id'][$lang],
          $node->field_publication_bookshop_id[$lang][0]['value']
        );
        /* TODO: Test body and tags */
      }
    }
  }
}