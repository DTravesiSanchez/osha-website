<?php
/**
 * @file
 * Code for the osha_newsletter feature.
 */

include_once 'osha_newsletter.features.inc';

/**
 * Implements hook_permission().
 */
function osha_newsletter_permission() {
  return array(
    'administer osha newsletter' => array(
      'title' => t('Administer OSHA newsletter'),
      'description' => t('Configure OSHA newsletter module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function osha_newsletter_menu() {
  $items = array();
  $items['admin/config/content/newsletter'] = array(
    'title' => 'Newsletter settings',
    'description' => 'Configure newsletter behavior',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_newsletter_admin_form'),
    'access arguments' => array('administer osha newsletter'),
    'position' => 'left',
    'weight' => 5,
    'file' => 'osha_newsletter.admin.inc',
  );
  return $items;
}

function osha_newsletter_action_info() {
  return array(
    'osha_newsletter_add_to_newsletter_action' => array(
      'label' => t('Add to newsletter'),
      'group' => t('Newsletter'),
      'type' => 'node',
      'parameter' => array(
        'newsletter' => array(
          'type' => 'node',
          'label' => 'Newsletter',
          'description' => t('Newsletter to add this node to'),
        ),
      ),
      // TODO: EDW
      #'acces callback' => 'tmgmt_rules_job_submit_access',
    ),
  );
}


/**
 * Actual VBO target action defined in hook_action_info above.
 */
function osha_newsletter_add_to_newsletter_action($node, $context) {
  if(isset($context['view_info']['arguments']['0'])) {
    $collection_name = $context['view_info']['arguments']['0'];
    /* @var EntityCollectionRow */
    $collection = entity_collection_load($collection_name);
    if ($collection) {
      $item = new EntityCollectionTreeNode('node', $node->nid, $node);
      $contexts = _entity_collection_get_contexts($collection);
      entity_collection_append_item($collection, $item, $contexts);
      $collection->save();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function osha_newsletter_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'entity_collection_edit_form':
      if (isset($form['#bundle']) && $form['#bundle'] == 'newsletter_content_collection') {
        osha_newsletter_fix_entity_collection_edit_form($form, $form_state);
        // Alter submit button label.
        $form['actions']['submit']['#value'] = t('Update newsletter');
      }
      break;

    case 'entity_collection_add_form':
      if (isset($form['#bundle']) && $form['#bundle'] == 'newsletter_content_collection') {
        osha_newsletter_fix_entity_collection_add_form($form, $form_state);
        // Alter submit button label.
        $form['actions']['submit']['#value'] = t('Create newsletter');
      }
      break;

    case 'entity_collection_content_add_form':
      $collection = $form_state['entity_collection'];
      $view = views_get_view('newsletter_node_selection');
      // Set the display and arguments based on the pane's context.
      $view->set_display('newsletter_selection_view_page');
      $args = $view->args;
      $args[0] = $collection->name;
      $view->set_arguments($args);

      // Remove error Notice: Undefined property: view::$dom_id.
      $view->pre_execute();
      $view->execute();
      $output = $view->render();

      $form['filter'] = array(
        '#type' => 'fieldset',
        '#title' => t('Add more content to the newsletter'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['filter']['content'] = array(
        '#ype' => 'item',
        '#markup' => $output,
      );
      break;

    case 'views_form_newsletter_node_selection_newsletter_selection_view_page':
      $form['#action'] = '/' . $_GET['q'];
      if (!empty($form['actions']['submit']['#submit'])) {
        $form['actions']['submit']['#submit'][] = 'osha_newsletter_entity_collection_newsletter_add_form_submit';
      }
      break;

    case 'entity_collection_content_form':
      // TODO:EDW: Use a different colour for taxonomy term.
      foreach ($form['content'] as $k => &$v) {
        if (strpos($k, 'taxonomy_term:') !== FALSE) {
          hide($v['style']);
        }
      }
      break;

    case 'search_block_form':
      break;

    default:
  }
}

/**
 * Alter form to create entity collection of type newsletter_content_collection.
 *
 * @param array $form
 *   Drupal form
 * @param array $form_state
 *   Drupal form state
 */
function osha_newsletter_fix_entity_collection_edit_form(&$form, &$form_state) {

}

/**
 * Alter form to create entity collection of type newsletter_content_collection.
 *
 * @param array $form
 *   Drupal form
 * @param array $form_state
 *   Drupal form state
 */
function osha_newsletter_fix_entity_collection_add_form(&$form, &$form_state) {
  global $user;

  $default_style = 'entity_collection_style_hierarchy';
  $default_row = 'entity_collection_row_view_mode';
  $allowed_bundles = array(
    'node' => variable_get('osha_newsletter_allowed_bundles'),
    'taxonomy_term' => array('newsletter_sections'),
  );

  // Pre-populate form_state.
  $form_state['bundle'] = 'newsletter_content_collection';
  $form_state['values']['settings']['style_settings'] = array('max_depth' => '1');
  $form_state['values']['settings']['row_settings'] = array(
    'style_per_row' => '1',
    'default_style' => array(
      'node' => 'teaser',
    ),
  );
  $form_state['values']['settings']['allowed_bundles'] = $allowed_bundles;

  // Set value and hide Style.

  $form['style']['#default_value'] = $default_style;
  $form['style']['#value'] = $default_style;

  // Set value and hide Row.
  $form['row']['#default_value'] = $default_row;
  $form['row']['#value'] = $default_row;

  // Form settings - We need to simulate Ajax select controls.
  // Row settings.
  $collection = $form_state['entity_collection'];
  $collection->row = $default_row;
  $collection->style = $default_style;
  $collection->settings = array(
    'row_settings' => array('style_per_row' => '1'),
    'style_settings' => array('max_depth' => '1'),
    'allowed_bundles' => $allowed_bundles,
  );


  // Add content types to allowed contents.
  $form['settings']['allowed_bundles']['node']['#default_value'] = variable_get('osha_newsletter_allowed_bundles');

  // Add Newsletter Section taxonomy to supported contents.
  $form['settings']['allowed_bundles']['taxonomy_term']['#default_value'] = array('newsletter_sections');

  $style = EntityCollectionStyle::getStyle($collection);
  if (isset($style) && method_exists($style, 'settingsForm')) {
    $style->settingsForm($form['settings']['style_settings']);
  }
  $row = EntityCollectionRow::getRow($collection);
  $row->settingsForm($form['settings']['row_settings']);

  // Enable custom styles values per row (Teaser etc.).
  $form['settings']['row_settings']['style_per_row']['#default_value'] = TRUE;
  $form['settings']['style_settings']['max_depth']['#default_value'] = 1;
  // Set default mode to teaser for nodes.
  $form['settings']['row_settings']['default_style']['node']['#default_value'] = 'teaser';


  // Alter title field label.
  $form['title']['#title'] = t('Newsletter title');

  // Set author to current user.
  $form['field_newsletter_author'][LANGUAGE_NONE]['#default_value'] = $user->uid;
  $form['field_newsletter_author'][LANGUAGE_NONE]['#access'] = FALSE;

  // Hide fields set above to their default values.
  $form['style']['#access'] = FALSE;
  $form['row']['#access'] = FALSE;
  // $form['settings']['row_settings']['#access'] = FALSE;
  // $form['settings']['allowed_bundles']['#access'] = FALSE;
  $form['settings']['style_settings']['#access'] = FALSE;
  $form['field_newsletter_sent']['#access'] = FALSE;
  $form['field_created']['#access'] = FALSE;
  $form['contexts']['#access'] = FALSE;
}

/**
 * Implements hook_entity_insert().
 */
function osha_newsletter_entity_insert($entity_collection, $type) {
  if ($type == 'entity_collection'
      && isset($entity_collection->bundle)
      && $entity_collection->bundle == 'newsletter_content_collection') {

    $contexts = _entity_collection_get_contexts($entity_collection);

    // Assign all taxonomies to the newly created entity.
    // Highlights
    // OSH matters
    // Latest publications
    // Coming soon
    // - Blog
    // - News
    // - Events.
    $voc = taxonomy_vocabulary_machine_name_load('newsletter_sections');
    $terms = taxonomy_get_tree($voc->vid);
    $weight = 0;
    foreach ($terms as $weight => $term) {
      $entity = entity_load('taxonomy_term', array($term->tid));
      $item = new EntityCollectionTreeNode('taxonomy_term', $term->tid, $entity);
      $item->position = $weight * 30;
      entity_collection_append_item($entity_collection, $item, $contexts);
    }

    $coming_soon_tid = variable_get('osha_newsletter_coming_soon_tid');
    if (!empty($coming_soon_tid)) {
      // Create 'Coming soon' node and append it at the end.
      $node = osha_newsletter_create_node('Sample content for coming soon ...');
      $item = new EntityCollectionTreeNode('node', $node->nid, $node);
      $item->position = ($weight + 1) * 30;
      $item->parent = 'taxonomy_term:' . $coming_soon_tid;
      $item->style = variable_get('osha_newsletter_node_view_mode', 'teaser');
      entity_collection_append_item($entity_collection, $item, $contexts);
    }

    // Select latest content and attach it to the newsletter.
    if (!empty($entity_collection->field_newsletter_content_after[LANGUAGE_NONE][0]['value'])) {
      $weight = 0;
      $after = $entity_collection->field_newsletter_content_after[LANGUAGE_NONE][0]['value'];
      $query = new EntityFieldQuery();
      $rows = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', variable_get('osha_newsletter_allowed_bundles'))
        ->propertyCondition('created', $after, '>=')
        ->execute();
      if (isset($rows['node'])) {
        $nodes = node_load_multiple(array_keys($rows['node']));
        foreach ($nodes as $nid => $node) {
          $item = new EntityCollectionTreeNode('node', $nid, $node);
          $item->position = ($weight + 1) * 30;
          // TODO:EDW Assign news to News section etc. by setting parent
          // $item->parent = 'taxonomy_term:' . $coming_soon_tid;
          $item->style = variable_get('osha_newsletter_node_view_mode', 'teaser');
          entity_collection_append_item($entity_collection, $item, $contexts);
        }
      }
    }
  }
}

/**
 * Create new node of specified type.
 *
 * @param string $title
 *   Node title
 * @param string $type
 *   bundle name
 *
 * @return object
 *   Saved node.
 */
function osha_newsletter_create_node($title, $type = 'newsletter_article') {
  global $user;
  $node = new stdClass();
  $node->title = $title;
  $node->type = $type;
  node_object_prepare($node);
  $node->language = 'en';
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->title_field[$node->language][0]['value'] = $title;
  $node = node_submit($node);
  node_save($node);
  return $node;
}
