<?php
/**
 * @file
 * Code for the OSHA Events feature.
 */

include_once 'osha_events.features.inc';


/**
 * Implements hook_node_access().
 */
function osha_events_node_access($node, $op, $account) {
  if ($op == 'view' && $node->status == 0 && $node->type == 'events' && user_access('edit any events content')) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * {@inheritdoc}
 */
function osha_field_widget_form_alter(&$element, &$form_state, $context) {
  $is_edit_form = (isset($context['form']['#node_edit_form']) && $context['form']['#node_edit_form'] == TRUE);
  $is_events_form = $is_edit_form && ($context['form']['type']['#value'] == 'events');
  if ($is_events_form && !empty($element['#field_name'])) {
    switch ($element['#field_name']) {
      case 'field_organization':
        $placeholder = t('The name of the organisation');
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;
      case 'field_city':
        $placeholder = t('Event city');
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;
      case 'field_location':
        $placeholder = 'Location of the event, e.g. name of venue, hall, hotel.';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;
    }
  }
}

function _form_add_website_placeholder_after_build($form) {
  $placeholder = t('Website of event');
  $form['field_website_of_event'][LANGUAGE_NONE][0]['url']['#attributes']['placeholder'] = $placeholder;
  drupal_add_js(drupal_get_path('module', 'osha') . '/js/jquery.charactersRemaining.js');
  drupal_add_js(drupal_get_path('module', 'osha') . '/js/charactersRemaining.js', array('scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_block_info().
 */
function osha_events_block_info() {
  $blocks = array();
  $blocks['osha_events_dates'] = array(
    'info' => t('events filter dates'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function osha_events_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  if (arg(0) == 'oshevents') {
    if (!isset($_REQUEST['field_start_date_value'])) {
      $call_args['params']['fq'][] = 'ds_field_start_date\:value:["' . date("Y-m-d\TH:i:s") . 'Z" TO *]';
    }
  }
}

function osha_events_dates_form($form, $form_state) {
  $form = array();
  $form['#prefix'] = '<div class="content-filters">';
  $form['#suffix'] = '</div>';
  $date_format = 'd/m/Y';
  $form['from_date'] = array(
    '#type' => 'date_popup',
    '#date_format'=> $date_format,
    '#date_year_range' => '-3:+3',
    '#title' => t('From date'),
    '#attributes' => ['class' => ['new-select-style']],
  );
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#date_format'=> $date_format,
    '#date_year_range' => '-3:+3',
    '#title' => t('To date'),
    '#attributes' => ['class' => ['new-select-style']],
  );
  if (!empty($_REQUEST['field_start_date_value'])) {
    $date = explode('/', $_REQUEST['field_start_date_value']['date']);
    $form['from_date']['#default_value'] = $date[2] . '-' . $date[1] . '-' . $date[0];
  }
  else {
    $form['from_date']['#default_value'] = date('Y-m-d');
  }
  if (!empty($_REQUEST['field_start_date_value2'])) {
    $date = explode('/', $_REQUEST['field_start_date_value2']['date']);
    $form['to_date']['#default_value'] = $date[2] . '-' . $date[1] . '-' . $date[0];
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */
function osha_events_block_view($delta = '') {
  $block = array();
  if ($delta == 'osha_events_dates') {
    drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/auto-submit.js', array('weight' => 20));
    drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/filter_dates.js', array('weight' => 20));
    $block['content'] = drupal_get_form('osha_events_dates_form');
  }
  return $block;
}

/**
 * Implements hook_form_alter().
 */
function osha_events_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'views_exposed_form') && ($form['#id'] == 'views-exposed-form-newevents-page')) {
    $form['search_api_views_fulltext']['#attributes']['placeholder'] = t('Search in resources');
    $form['search_api_views_fulltext']['#attributes']['class'][] = 'search-new-design';

    $form['sort_by']['#attributes']['class'][] = 'new-select-style';
    $form['field_country_code']['#attributes']['class'][] = 'new-select-style';
    $form['field_country_code']['#chosen'] = TRUE;
  }
  $is_edit_form = isset($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE;
  $is_events_form = $is_edit_form && $form['type']['#value'] == 'events';
  if ($is_events_form) {
    $form['#after_build'] = array('_form_add_website_placeholder_after_build');
  }
  switch ($form_id) {
    case 'events_node_form':
      $form['field_agency_initial_contact']['#access'] = FALSE;
      $form['field_satisfaction_rate']['#access'] = FALSE;
      $form['field_event_in_amp']['#access'] = FALSE;
      $form['field_agency_contact_reply']['#access'] = FALSE;
      $form['field_number_of_attendees']['#access'] = FALSE;
      $form['field_organized_by_eu_osha']['#access'] = FALSE;

      $form['#validate'][] = 'osha_events_form_validate';
      // Activity field changes.
      if (isset($form['field_activity'][LANGUAGE_NONE][0])) {
        unset($form['field_activity'][LANGUAGE_NONE]['add_more']);
        // Extract the field field tree to change cardinality.
        $field = $form['field_activity'][LANGUAGE_NONE][0]['tid'];

        // Show the label as usual.
        unset($field['#title_display']);

        $field['#options'] = array('' => t('- None -')) + $field['#options'];
        // Switch validator.
        $field['#element_validate'] = array('options_field_widget_validate');

        $form['field_activity'][LANGUAGE_NONE] = $field;
      }

      // Create new event form.
      if (!isset($form['#node']->nid)) {
        drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/new_event_form.js');
      }

      // MC-84 Disable country and city from the form when selected type is Webminar.
      // Necessary to add the js in an after build callback because we need it
      // after form_set_error occurs.
      $form['#after_build'][] = 'osha_events_node_form_after_build';
      break;

    case 'views_exposed_form':
      if (in_array($form['#id'], array('views-exposed-form-events-page'))) {
        // Set default date for popup on end date when start date is selected.
        $form['field_start_date_value2']['value']['#attached']['js'] = array(
          drupal_get_path('module', 'osha_events') . '/js/event_search_page.js' => array(
            'type' => 'file',
          ),
        );

        if (!empty($form_state['input']['field_start_date_value']['value']['date']) && empty($form_state['input']['field_start_date_value2']['value']['date'])) {
          $form['field_start_date_value2']['value']['#datepicker_options']['defaultDate'] = $form_state['input']['field_start_date_value']['value']['date'];
        }
      }
      break;
  }
}

/**
 * After build callback for events_node_form.
 */
function osha_events_node_form_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/event_form.js');

  if ($form_state['values']['status'] == 1) {
    drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/published_event_form.js');
  }

  return $form;
}

/**
 * Validation callback.
 */
function osha_events_form_validate($form, &$form_state) {
  // When publishing an event, some fields are required.
  $values = $form_state['values'];
  $node = $form_state['node'];
  $type = $values['field_event_type'][LANGUAGE_NONE][0]['value'];
  if ($values['status'] == 1) {
    if (empty($type) || $type == 'Visit') {
      form_set_error('field_event_type', 'Events of type <b>Visit</b> can not be published');
    }
    if (empty($values['field_organization'][LANGUAGE_NONE][0]['value'])) {
//      form_set_error('field_organization', 'You have to add an Organization.');
    }

    if (empty($values['field_tags'][LANGUAGE_NONE][0]['tid'])) {
      form_set_error('field_tags', 'You have to add a Category / Tag.');
    }

    if ($values['field_for_the_web'][LANGUAGE_NONE][0]['value'] != 'Yes') {
      form_set_error('field_for_the_web', 'Event is not for web publishing. To override, set field "For the web / Public" to "Yes".');
    }
  }

  // Country and city are not required for webminar events.
  if ($type == 'Webminar') {
    // Country and city fields need to be NULL for webminar events so that
    // they will not show in frontend.
    form_set_error('field_city', '', array());
    form_set_error('field_country_code', '', array());
    $form_state['values']['field_country_code'][LANGUAGE_NONE][0]['value'] = $form_state['values']['field_city'][LANGUAGE_NONE][0]['value'] = NULL;
  }
  else {
    if (empty($values['field_country_code'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_country_code', 'Country field is required.');
    }
    if (empty($values['field_city'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_city', 'City field is required.');
    }
  }

  // Check if the event is unique by Start and End Date field.
  $start_date = $form_state['values']['field_start_date']['und'][0]['value'];
  $end_date = $form_state['values']['field_start_date']['und'][0]['value2'];

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'events')
      ->fieldCondition('field_start_date', 'value', $start_date, '=')
      ->fieldCondition('field_start_date', 'value2', $end_date, '=')
      ->entityOrderBy('entity_id', 'DESC');
  if (isset($node->nid)) {
    $query->entityCondition('entity_id', $node->nid, '!=');
  }
  $results = $query->execute();

  if (isset($results['node']) && count($results['node']) >= 1) {
    drupal_set_message(t('One or more events have the same Start and End date.'), 'warning');
    $events = '';
    foreach ($results['node'] as $nid => $node_obj) {
      $node = node_load($nid);
      $events .= l($node->title, 'node/' . $nid);
      $events .= '<br />';
    }
    drupal_set_message($events, 'warning');
  }
}

function osha_events_views_pre_render(&$view) {
  if ($view->name == 'newevents') {
    drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/ouical.min.js');
  }
}

function osha_events_query_alter($query) {

  if ($query->hasTag('debug')) {
    $sql = (string)$query;
    $connection = Database::getConnection();
    foreach ((array) $query->arguments() as $key => $val) {
      $quoted[$key] = $connection->quote($val);
    }
    $sql = strtr($sql, $quoted);
    dpm($sql);
}
}


/**
 * Altering Date Popup to remove labels and description for specific field
 */
function osha_events_date_popup_process_alter(&$element, &$form_state, $context) {
  if ($element['#name'] == 'field_start_date_value' || $element['#name'] == 'field_start_date_value2') {
    //unset($element['date']['#description']);
    unset($element['date']['#title']);
  }
  if ($element['#name'] == 'from_date' || $element['#name'] == 'to_date') {
    unset($element['date']['#description']);
    unset($element['date']['#title']);
  }
}

/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_events_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha_events', 'osha_events.translations');
  return osha_events_get_translatable_strings();
}


/**
 * Implements hook_user_role_insert().
 */
function osha_events_user_role_insert($role) {
  if ($role->name == 'Events Editor') {
    user_role_grant_permissions($role->rid, array(
      'access contextual links',
      'access dashboard',

      'create files',
      'view own private files',
      'view own files',
      'view files',

      'edit own image files',
      'edit any image files',
      'delete own image files',
      'download own image files',
      'download any image files',

      'use text format full_html',
      'use text format filtered_html',

      'access media browser',

      'edit meta tags',
      'access content',
      'view own unpublished content',
      'view revisions',

      'create events content',
      'edit own events content',
      'edit any events content',

      'create url aliases',
      'access administration pages',
      'view the administration theme',
    ));
  }
}

/**
 * Implements hook_phpexcel_export().
 */
function osha_events_phpexcel_export($op, &$data, &$phpexcel, $options, $column = NULL, $row = NULL) {
  $xls_colours = array(
    'Black' => '000000',
    'Red' => 'FF0000',
    'Grey' => '808080',
    'Yellow' => 'FFFF00',
    'Green' => '008000',
    'Blue' => '0000FF',
  );
  switch ($op) {
    case 'post cell':
      if ($row == 1) {
        // First row.
        $styleArray = array('font' => array('bold' => TRUE));
        $phpexcel->getStyleByColumnAndRow($column, $row)->applyFromArray($styleArray);
      }
      else {
        // Use the color named in the first cell of the current row.
        $first_cell = $phpexcel->getCellByColumnAndRow(0, $row)->getValue();
        if (!empty($xls_colours[$first_cell])) {
          $styleArray = array(
            'font'  => array(
              'color' => array('rgb' => $xls_colours[$first_cell]),
            ),
          );
          $phpexcel->getStyleByColumnAndRow($column, $row)->applyFromArray($styleArray);
        }
      }
      break;
  }
}

/**
 * Implements hook_element_info_alter()
 */
function osha_events_element_info_alter(&$type) {
  if (isset($type['link_field'])) {
    $type['link_field']['#process'][] = 'osha_events_link_field_process';
  }
}

/**
 * Change field label.
 */
function osha_events_link_field_process($element, $form_state, $complete_form) {
  switch ($element['#field_name']) {
    case 'field_website_of_event':
      $element['title']['#title'] = t('Website name');
      $element['url']['#title'] = t('Website url');
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function osha_events_field_formatter_info() {
  $info = array(
    'translated_title_as_link' => array(
      'label' => 'Translated title, as link',
      'field types' => array('link_field'),
      'description' => 't(title) as link.',
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function osha_events_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'translated_title_as_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_events_translated_title_as_link_format',
          '#entity' => $entity,
          '#item' => $item,
          '#delta' => $delta,
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function osha_events_theme() {
  return array(
    'osha_events_translated_title_as_link_format' => array(
      'variables' => array('entity' => NULL, 'item' => NULL, 'delta' => NULL),
    ),
  );
}

/*
* Formats link as translated title
*/
function theme_osha_events_translated_title_as_link_format($element) {
  $item = $element['item'];
  if (empty($item['title'])) {
    $title = $item['display_url'];
  }
  else {
    $title = t($item['title']);
  }
  return l($title, $item['url'], array(
    'attributes' => $item['attributes'],
    'query' => $item['query'],
    'fragment' => $item['fragment'],
    'absolute' => $item['absolute'],
    'html' => $item['html'],
  ));
}
