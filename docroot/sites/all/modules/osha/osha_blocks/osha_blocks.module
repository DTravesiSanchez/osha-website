<?php
/**
 * @file
 * Code for the Osha Blocks feature.
 */

include_once 'osha_blocks.features.inc';

/**
 * Implements hook_block_info().
 */
function osha_blocks_block_info() {
  $blocks = array();
  $blocks['oshwiki_featured_articles'] = array(
    'info' => t('OSHwiki Featured Articles custom block')
  );
  $blocks['osha_archived_content'] = array(
    'info' => t('Node archived info block')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function osha_blocks_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'oshwiki_featured_articles' :
      $block['subject'] = t('OSHwiki Featured Articles');
      $block['content'] = oshwiki_featured_articles_block_view();
      break;
    case 'osha_archived_content':
      $block['subject'] = t('OSHA archived content');
      $block['content'] = osha_archived_content_block_view();
      break;
  }

  return $block;
}

function oshwiki_featured_articles_block_view() {
  $node = menu_get_object();

  if (isset($node)) {
    if ($node->type == 'article' || $node->type == 'publication') {
      $tagged_wikis = get_related_wiki($node);
      return theme('oshwiki_featured_articles', array('tagged_wikis' => $tagged_wikis));
    }
  }
  return theme('oshwiki_featured_articles', array('tagged_wikis' => array()));
}


function osha_archived_content_block_view() {
  // CW-1109: Mark node as outdated
  $node = menu_get_object();
  if (isset($node) && isset($node->field_archived[LANGUAGE_NONE][0]['value']) &&
    $node->field_archived[LANGUAGE_NONE][0]['value'] == 1) {
    global $user;
    if (in_array('administrator', $user->roles)) {
      return theme('osha_archived_content', array());
    }
  }
  return '';
}

/**
 * Called from hook_block_view
 */
function get_related_wiki($node) {
  $wiki_articles_no = 0;
  $tagged_wikis = array();
  if (!empty($node->field_related_oshwiki_articles)) {
    $manual_wiki_articles = $node->field_related_oshwiki_articles[LANGUAGE_NONE];
    $wiki_articles_no = sizeof($manual_wiki_articles);
    // add manually tagged wiki articles (hidden in display mode)
    foreach ($manual_wiki_articles as $related_wiki) {
      $tmp_node = node_load($related_wiki['target_id']);
      $tagged_wikis[$tmp_node->nid] = node_view($tmp_node,'osha_wiki');
    }
  }

  if ($wiki_articles_no < 2) {
    $limit = 2 - $wiki_articles_no;
    // get 2-$wiki_articles_no tagged wiki
    $wiki_categories_tids = array();
    if (!empty($node->field_wiki_categories)) {
      $wiki_categories_tids = $node->field_wiki_categories[LANGUAGE_NONE];
    }

    $result = array();
    if (!empty($wiki_categories_tids)) {
      // query all wiki articles in the same category or its children
      $tids = array();
      $voc = taxonomy_vocabulary_machine_name_load('wiki_categories');
      foreach ($wiki_categories_tids as $tid) {
        // normally only one $tid, but just in case
        array_push($tids, $tid['tid']);
        // load and push also children
        $terms = taxonomy_get_tree($voc->vid, $tid['tid']);
        foreach ($terms as $term) {
          array_push($tids, $term->tid);
        }
      }

      // exclude manually related
      $excluded_nids = array();
      array_push($excluded_nids, 0); // avoid empty NOT IN clause
      if (!empty($node->field_related_oshwiki_articles)) {
        foreach ($node->field_related_oshwiki_articles as $related_wiki) {
          array_push($excluded_nids, $related_wiki[0]['target_id']);
        }
      }
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'wiki_page')
        ->entityCondition('entity_id', $excluded_nids, 'NOT IN')
        ->fieldCondition('field_wiki_categories', 'tid', $tids, 'IN')
        ->fieldOrderBy('field_updated', 'value', 'DESC')
        ->pager($limit)
        ->execute();
      if (!empty($result)) {
        foreach ($result['node'] as $n) {
          $tmp_node = node_load($n->nid);
          $tagged_wikis[$tmp_node->nid] = node_view($tmp_node, 'osha_wiki');
        }
      }
    }

    // Search for wikies by nace and thesaurus (see CW-916).
    if ($count = count($tagged_wikis) < 2) {
      $limit = 2 - $count;
      $taxon_fields = array('field_thesaurus', 'field_nace_codes');
      $solr_taxon_fields = array();
      foreach ($taxon_fields as $field) {
        if (!empty($node->{$field}[LANGUAGE_NONE])) {
          foreach ($node->{$field}[LANGUAGE_NONE] as $term) {
            $solr_taxon_fields[$field][] = $term['tid'];
          }
        }
      }
      if (!empty($solr_taxon_fields)) {
        // Get nids of wiki form solr.
        $exclude = array_keys($tagged_wikis);
        $solr_wiki_nids = osha_blocks_related_wiki_solr_query($solr_taxon_fields, $exclude, $limit);
        $solr_wiki = node_load_multiple($solr_wiki_nids);
        if (!empty($solr_wiki)) {
          foreach ($solr_wiki as $wiki_node) {
            if (empty($tagged_wikis[$wiki_node->nid])) {
              $tagged_wikis[$wiki_node->nid] = node_view($wiki_node, 'osha_wiki');
            }
          }
        }
      }
    }
  }

  return $tagged_wikis;
}

/**
 * Search in solr for wikies with some taxonomy terms.
 *
 * @param array $taxon_fields
 *   Taxonomy term ids grouped by field name (as key)
 * @param array $exclude
 *   Node ids to exclude in the search.
 * @param int $limit
 *   Number of results to return.
 *
 * @return array
 *   Resulted Node ids.
 */
function osha_blocks_related_wiki_solr_query($taxon_fields, $exclude = array(), $limit = 3) {
  $server = search_api_server_load('solr_server');
  $index = search_api_index_load('default_multilingual_node_index');
  $fields = $index->getFields();
  $connection = new SearchApiSolrConnection($server->options);
  $bundles = array('wiki_page');
  $params['rows'] = $limit;
  $params['fq'][] = 'ss_search_api_language:"en"';
  $params['fq'][] = 'is_status:"1"';
  // Add condition for wiki bundle..
  foreach ($bundles as $bundle) {
    $params['fq'][] = '{!tag=ss_type}ss_type:"' . $bundle . '"';
  }
  // Add condition to exclude some nodes.
  if (!empty($exclude)) {
    foreach ($exclude as $nid) {
      $params['fq'][] = '{!tag=is_nid}*:* AND -(is_nid:"' . $nid . '")';
    }
  }
  // Add conditions for requested search terms.
  foreach ($taxon_fields as $field_name => $tids) {
    if (!empty($tids)) {
      $taxon_param = array();
      foreach ($tids as $tid) {
        $taxon_param[] = '(im_' . $field_name . ':' . $tid . ')';
      }
      $params['fq'][] = '{!tag=im_' . $field_name . '}(' . implode(' OR ', $taxon_param) . ')';
      $params['qf'][] = 'im_' . $field_name . '^' . $fields[$field_name]['boost'];
    }
  }

  // Make the search.
  $request = $connection->search(NULL, $params);
  $data = json_decode($request->data);

  // Extract nids.
  $nids = array();
  if (!empty($data->response->docs)) {
    foreach ($data->response->docs as $solr_node) {
      $nids[] = $solr_node->is_nid;
    }
  }
  return $nids;
}

/**
 * Implements hook_theme().
 */
function osha_blocks_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'osha_blocks');

  $theme['oshwiki_featured_articles'] = array(
    'template' => 'oshwiki_featured_articles',
    'variables' => array(
      'tagged_wikis' => NULL
    ),
    'path' => $path . '/templates'
  );

  $theme['osha_archived_content'] = array(
    'template' => 'osha_archived_content',
    'variables' => array(),
    'path' => $path . '/templates'
  );

  return $theme;
}
