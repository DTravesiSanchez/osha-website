<?php
/**
 * @file
 * Code for the Calls feature.
 */

include_once 'osha_calls.features.inc';

define('OSHA_CALLS_CONTENT_TYPE_CALLS', 'calls');

/**
 * Implements Elysia hook_cronapi().
 */
function osha_calls_cronapi() {
  return array('osha_calls_cron' => array(
    'description' => 'Unpublish calls',
    'rule' => '55 0 * * *',
  ));
}

function osha_calls_views_query_alter(&$view, &$query) {
  if (($view->name == 'calls') && ($view->current_display == 'block_1')) {
    $query->where[1]['conditions'][3]['value'][':field_data_field_publication_date_field_publication_date_value'] = date('Y') - 4;
  }
  if (($view->name == 'calls') && ($view->current_display == 'page_1')) {
    if (isset($_REQUEST['year'])) {
      $current_year = intval($_REQUEST['year']);
      $query->where[1]['conditions'][5]['value'][':field_data_field_publication_date_field_publication_date_value'] = $current_year;
      $query->where[1]['conditions'][5]['value'][':field_data_field_publication_date_field_publication_date_value1'] = $current_year;
    }
    else {
      unset($query->where[1]['conditions'][5]);
    }
  }
}

/**
 * Implements hook_cron().
 */
function osha_calls_cron() {
  $result = views_get_view_result('calls', 'block_1');
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    if (_workbench_moderation_moderate_access($node, OSHA_WORKFLOW_STATE_FINAL_DRAFT)) {
      workbench_moderation_moderate(node_load($node->nid, $node->vid), OSHA_WORKFLOW_STATE_FINAL_DRAFT);
    }
  }
}

function osha_calls_get_filter_years() {
  $result = views_get_view_result('calls', 'block_archived_calls');
  $markup = [];
  if ($result) {
    $markup[] = l(t('All calls'), 'about-eu-osha/procurement/calls_archive');
  }
  $year = '';
  $current_year = '';
  if (isset($_REQUEST['year'])) {
    $current_year = $_REQUEST['year'];
  }
  foreach ($result as $key => $row) {
    $row_year = format_date(strtotime($row->field_field_publication_date[0]['raw']['value']), 'custom', 'Y');
    if ($year == $row_year) {
      unset($result[$key]);
      continue;
    }
    $year = $row_year;
    // Overwrite value with a link to archive page.
    $options = array('query' => array('year' => $row_year));
    if ($current_year == $year) {
      $options['attributes']['class'][] = 'active';
    }
    $markup[] = l($year, 'about-eu-osha/procurement/calls_archive', $options);
  }
  return '<div class="filter-years"><div class="filter-title">' . t('Show calls:') . '</div><div class="filter-values">' . implode(' | ', $markup) . '</div></div>';
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritdoc}
 */
function osha_calls_views_pre_render(&$view) {

  if ($view->name == 'calls' && ($view->current_display == 'page_1')) {
    $view->header['area_text_custom']->options['content'] = osha_calls_get_filter_years() . $view->header['area_text_custom']->options['content'];
  }

  if ($view->name == 'calls' && in_array($view->current_display, array('block_archived_calls'))) {
    $year = '';
    foreach ($view->result as $key => $result) {
      $row_year = format_date(strtotime($result->field_field_publication_date[0]['raw']['value']), 'custom', 'Y');
      if ($year == $row_year) {
        unset($view->result[$key]);
        continue;
      }
      $year = $row_year;
      // Overwrite value with a link to archive page.
      $result->field_field_publication_date[0]['rendered']['#markup']
        = l(t('EU-OSHA calls @year', array('@year' => $year)), 'about-eu-osha/procurement/calls_archive', array(
          'query' => array(
            'year' => $row_year,
          ),
        )
      );
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function osha_calls_field_formatter_info() {
  $info = array(
    'file_taxonomy_description' => array(
      'label' => t('File with description as taxonomy'),
      'field types' => array('file'),
      'description' => t('Displays description from taxonomy <b>Attachment file type</b>.'),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function osha_calls_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'file_taxonomy_description':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_calls_file_taxonomy_description',
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function osha_calls_theme() {
  return array(
    'osha_calls_file_taxonomy_description' => array(
      'variables' => array('file' => NULL, 'delta' => NULL),
    ),
  );
}

/**
 * Theme the file_taxonomy_description formatter.
 *
 * @param array $element
 *   Array containing the file entity and its delta.
 *
 * @return string
 *   HTML rendered string
 */
function theme_osha_calls_file_taxonomy_description($element) {
  $file = (object) $element['file'];
  $icon_directory = drupal_get_path('theme', 'osha_frontend') . '/images/file_icons';
  $url = file_create_url($file->uri);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
    'html' => TRUE,
  );

  $link_text = ' <span class="file-icon">' . $icon . '</span>';

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text .= $file->filename;
  }
  else {
    if ($term = taxonomy_term_load($file->description)) {
      $link_text .= $term->name;
    }
    else {
      $link_text .= $file->description;
    }
    $options['attributes']['title'] = check_plain($file->filename);
  }
  if ($size = filesize($file->uri)) {
    $link_text .= '<span class="related_size">(' . format_size($size) . ')</span>';
  }
  return '<span class="file">' . l($link_text, $url, $options) . '</span>';
}

/**
 * Implements hook_post_features_enable_feature().
 *
 * {@inheritdoc}
 */
function osha_calls_post_features_enable_feature($component) {
  // After the field_instance ...
  if ($component == 'variable') {
    menu_rebuild();
    drupal_static_reset();
    if ($role = user_role_load_by_name('administrator')) {
      $permissions = array(
        'create calls content',
        'edit own calls content',
        'edit any calls content',
        'delete own calls content',
        'delete any calls content',
      );
      user_role_grant_permissions($role->rid, $permissions);
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * {@inheritdoc}
 */
function osha_calls_field_widget_form_alter(&$element, &$form_state) {
  if (!empty($element['#field_name'])
      && $element['#field_name'] == 'field_related_resources') {
    $node = $form_state['node'];
    if ($node->type == 'calls') {
      foreach (element_children($element) as $i) {
        $ctrl = &$element[$i];
        $ctrl['#process'] = array_merge($ctrl['#process'], array('osha_calls_file_field_widget_process'));
      }
    }
  }
}

/**
 * Widget processing function to replace text input with select widget.
 *
 * @param array $element
 *   Element to process.
 *
 * @return array
 *   Updated widget.
 */
function osha_calls_file_field_widget_process($element) {
  $file_types = &drupal_static(__FUNCTION__);
  if (!isset($file_types)) {
    $voc = taxonomy_vocabulary_machine_name_load('attachment_file_type');
    $types = taxonomy_get_tree($voc->vid);
    $file_types[''] = t('-- Please select type --');
    foreach ($types as $term) {
      $file_types[$term->tid] = $term->name;
    }
  }
  if (isset($element['description'])) {
    $description = &$element['description'];
    $description['#type'] = 'select';
    $description['#options'] = $file_types;
    $description['#title'] = t('Type');
  }
  return $element;
}

/**
 * Implements hook_node_validate().
 *
 * {@inheritdoc}
 */
function osha_calls_node_validate($node, $form, &$form_state) {
  $values = $form_state['values'];
  if ($node->type == 'calls' &&
      !empty($values['field_calls_deadline'][LANGUAGE_NONE][0]['value']) &&
      !empty($values['field_publication_date'][LANGUAGE_NONE][0]['value'])
  ) {
    $deadline_date = strtotime($values['field_calls_deadline'][LANGUAGE_NONE][0]['value']);
    $publication_date = strtotime($values['field_publication_date'][LANGUAGE_NONE][0]['value']);
    // Assume that all fields use the same timezone handling settings.
    if ($deadline_date < $publication_date) {
      form_set_error('field_calls_deadline', 'Deadline must be after the publication date');
    }
    if (!empty($values['field_expiration_date'][LANGUAGE_NONE][0]['value'])) {
      $expiration_date = strtotime($values['field_expiration_date'][LANGUAGE_NONE][0]['value']);
      if ($expiration_date < $deadline_date) {
        form_set_error('field_expiration_date', 'Item must expire after the deadline');
      }
    }
  }
}

/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_calls_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha_calls', 'osha_calls.translations');
  return osha_calls_get_translatable_strings();
}
