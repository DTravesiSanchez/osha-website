<?php

/**
 * Implements hook_install().
 */
function osha_workflow_install() {
// Remove exiting transitions.
  module_load_include('inc', 'workbench_moderation', 'workbench_moderation.admin');
  $form_state = array();
  $form = workbench_moderation_admin_transitions_form(array(), $form_state);
  unset($form['transitions']['#tree']);
  foreach ($form['transitions'] as $transition) {
    $form_state['values']['transitions'][] = array(
      'transition' => (object) $transition,
      'delete' => 1,
    );
  }
  drupal_form_submit('workbench_moderation_admin_transitions_form', $form_state);

  workbench_access_reset_tree();
  // Update the form acces settings auto assign checkbox.
  $form_state = array();
  drupal_build_form('workbench_access_settings_form', $form_state);
  $form_state['values'] = array(
    'workbench_access' => 'menu',
    'workbench_access_menu' => array(
      'main-menu' => 'main-menu',
    ),
    'workbench_access_menu_limit' => 1,
    'workbench_access_auto_assign' => 1,
  );
  drupal_form_submit('workbench_access_settings_form', $form_state);

  // Assign administrator to main menu sections.
  if ($role = user_role_load_by_name('administrator')) {
    workbench_access_role_section_save($role->rid, 'main-menu', 'menu');
  }
  else {
    // @todo: Throw some error?
  }

  // @todo Submit the form instead of using direct function.
  /*$form_state = array();
  $form_state['build_info']['args'] = array('menu', 'main-menu');
  drupal_build_form('workbench_access_role_form', $form_state);
  $form_state['values']['roles'] = array(3 => 3);
  drupal_form_submit('workbench_access_role_form', $form_state);*/
}

/**
 * Implements hook_update_n().
 */
function osha_workflow_update_7001() {
  module_load_include('module', 'osha_workflow');
  osha_workflow_create_roles();
}

/**
 * Implements hook_schema().
 */
function osha_workflow_schema() {
  $schema = array();
  $schema['moderation_item'] = array(
    'description' => 'Base table for moderation_item entity',
    'fields' => array(
      'miid' => array(
        'description' => 'Identifier for the moderation item',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Moderated node ID (nid)',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Moderated node version ID (vid)',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Workflow type: ie. review or approve',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Account doing the moderation',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'approved' => array(
        'description' => 'NULL - pending, 1 - approved, 0 - rejected',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'Order of moderation, lowest first',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('miid'),
    'indexes' => array(
      'moderator_uid' => array('uid'),
    ),
    'unique keys' => array(
      'moderation_unique' => array('nid', 'vid', 'type', 'uid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'nid' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'vid' => array(
        'table' => 'node_revision',
        'columns' => array('vid' => 'vid'),
      ),
    ),
  );
  return $schema;
}
