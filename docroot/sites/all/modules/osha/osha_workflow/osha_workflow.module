<?php
/**
 * @file
 * Code for the Osha Workflow feature.
 */

include_once 'osha_workflow.features.inc';
include_once 'osha_workflow.api.inc';

define('OSHA_WORKFLOW_MODERATION_TYPE_REVIEW', 'review');
define('OSHA_WORKFLOW_MODERATION_TYPE_APPROVE', 'approve');

/* Publishing workflow roles */
define('OSHA_WORKFLOW_ROLE_EDITOR', 'Editor');
define('OSHA_WORKFLOW_ROLE_REVIEW_MANAGER', 'Review Manager');
define('OSHA_WORKFLOW_ROLE_PROJECT_MANAGER', 'Project Manager');
define('OSHA_WORKFLOW_ROLE_APPROVER', 'Approver');
// Drupal administrator.
define('OSHA_WORKFLOW_ROLE_ADMINISTRATOR', 'administrator');

define('OSHA_WORKFLOW_MODERATION_ACCEPT', 1);
define('OSHA_WORKFLOW_MODERATION_REJECT', 0);

/* Workflow states */
define('OSHA_WORKFLOW_STATE_DRAFT', 'draft');
define('OSHA_WORKFLOW_STATE_FINAL_DRAFT', 'final_draft');
define('OSHA_WORKFLOW_STATE_REJECTED', 'rejected');
define('OSHA_WORKFLOW_STATE_APPROVED', 'approved');
define('OSHA_WORKFLOW_STATE_TO_BE_REVIEWED', 'needs_review');
define('OSHA_WORKFLOW_STATE_TO_BE_APPROVED', 'to_be_approved');
define('OSHA_WORKFLOW_STATE_READY_TO_PUBLISH', 'ready_to_publish');
define('OSHA_WORKFLOW_STATE_PUBLISHED', 'published');

/**
 * Implements hook_menu().
 */
function osha_workflow_menu() {
  $items = array();
  $items['node/%node/approve'] = array(
    'title' => 'Approve',
    'description' => 'Approval page for the OSHA approval workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_node_approval_form', 1),
    'access callback' => 'osha_workflow_moderation_access',
    'access arguments' => array(OSHA_WORKFLOW_MODERATION_TYPE_APPROVE, 1),
    'file' => 'osha_workflow.admin.inc',
    'weight' => 10,
  );
  $items['node/%node/review'] = array(
    'title' => 'Review',
    'description' => 'Review page for the OSHA reviewing workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_node_review_form', 1),
    'access callback' => 'osha_workflow_moderation_access',
    'access arguments' => array(OSHA_WORKFLOW_MODERATION_TYPE_REVIEW, 1),
    'file' => 'osha_workflow.admin.inc',
    'weight' => 9,
  );
  return $items;
}

/**
 * Permission access to moderation menu local tasks.
 *
 * @param string $moderation_type
 *   Type of moderation
 * @param object $node
 *   Moderated node
 *
 * @return null|string
 *   Access permission to the screen.
 */
function osha_workflow_moderation_access($moderation_type, $node) {
  if (OshaWorkflowPermissions::userCanAccessReviewScreen($node)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_entity_info().
 */
function osha_workflow_entity_info() {
  return array(
    'moderation_item' => array(
      'label' => t('Moderation item'),
      'module' => 'osha_workflow',
      'controller class' => 'OshaWorkflowModerationItemController',
      'base table' => 'moderation_item',
      'entity keys' => array(
        'id' => 'miid',
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 *
 * We need this to define permissions granted to content moderators.
 */
function osha_workflow_permission() {
  $permissions = array();
  // Per state permissions. Used by workbench_moderation_node_access().
  $states = workbench_moderation_states();
  foreach ($states as $state) {
    $permissions['edit any content in ' . $state->name] = array(
      'title' => t('Edit any content in @state', array('@state' => $state->label)),
    );
  }
  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * {@inheritdoc}
 * @see http://openmonkey.blogspot.ro/2011/10/add-permissions-to-workbench-moderation.html
 */
function osha_workflow_node_access($node, $operation, $user) {
  if (isset($node->workbench_moderation) && $operation == 'update') {
    if (variable_get('workbench_moderation_per_node_type', FALSE)
        && !user_access('edit ' . $node->type . ' in ' . $node->workbench_moderation['current']->state, $user)
        && !user_access('edit any content in ' . $node->workbench_moderation['current']->state, $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_theme().
 */
function osha_workflow_theme() {
  return array(
    'osha_workflow_moderation_form' => array(
      'render element' => 'form',
      'file' => 'osha_workflow.admin.inc',
    ),
  );
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_transition($node, $old, $new) {
  // Review workflow.
  if ($new == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED) {
    //
  }
  // Approval workflow.
  if ($new == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    //
  }
}

/**
 * Implements hook_workbench_moderation_access_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_access_alter(&$access, $op, $node) {
  if ($op == 'view revisions' && user_access('view revisions')) {
    $access = 1;
  }
}

/**
 * Load a single moderation_item entity.
 *
 * @param int $id
 *   Primary key
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function disabled_osha_workflow_moderation_item_load($id, $reset = FALSE) {
  $ret = entity_load('moderation_item', array($id), array(), $reset);
  return reset($ret);
}

/**
 * Load moderation_item entities from database.
 *
 * @param array $ids
 *   An array of entity IDs, or FALSE to load all entities.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base table, where
 *   the keys are the database fields and the values are the values those
 *   fields must have. Instead, it is preferable to use EntityFieldQuery to
 *   retrieve a list of entity IDs loadable by this function.
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_workflow_moderation_item_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('moderation_item', $ids, $conditions, $reset);
}


/**
 * Implements hook_form_alter().
 */
function osha_workflow_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'workbench_moderation_moderate_form') {
    $node = $form['node']['#value'];
    $state = $node->workbench_moderation['current']->state;
    $moderation_type = NULL;
    if ($state == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED) {
      $moderation_type = OSHA_WORKFLOW_MODERATION_TYPE_REVIEW;
    }
    elseif ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
      $moderation_type = OSHA_WORKFLOW_MODERATION_TYPE_APPROVE;
    }
    if ($moderation_type) {
      global $user;
      if ($next = osha_workflow_get_next_moderator($node, $moderation_type)) {
        if ($user->uid == $next->uid) {
          // Hijack the form & modify for voting purposes.
          hide($form['state']);
          $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Approve'),
            '#submit' => array('osha_workflow_form_moderate_approve_submit'),
          );
          $form['reject'] = array(
            '#type' => 'submit',
            '#value' => t('Reject'),
            '#submit' => array('osha_workflow_form_moderate_reject_submit'),
          );
          $form['message'] = array(
            '#type' => 'textfield',
            '#prefix' => '<div>',
            '#title' => t('Leave a moderation message'),
            '#resizable' => FALSE,
            '#required' => FALSE,
            '#attributes' => array(
              'placeholder' => t('You can leave a note here'),
            ),
            '#suffix' => '<div>',
          );
          unset($form['message']);
        }
      }
    }
  }
}

/**
 * Submit form hook for vote - when approved.
 */
function osha_workflow_form_moderate_approve_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = $values['node'];
  $state = $node->workbench_moderation['current']->state;
  if ($state == 'needs_review') {
    osha_workflow_moderate($node, OSHA_WORKFLOW_MODERATION_TYPE_REVIEW, OSHA_WORKFLOW_MODERATION_ACCEPT);
  }
  elseif ($state == 'to_be_approved') {
    osha_workflow_moderate($node, OSHA_WORKFLOW_MODERATION_TYPE_APPROVE, OSHA_WORKFLOW_MODERATION_ACCEPT);
  }
}

/**
 * Submit form hook for vote - when rejecting.
 */
function osha_workflow_form_moderate_reject_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = $values['node'];
  $state = $node->workbench_moderation['current']->state;
  if ($state == 'needs_review') {
    osha_workflow_moderate($node, OSHA_WORKFLOW_MODERATION_TYPE_REVIEW, OSHA_WORKFLOW_MODERATION_REJECT);
  }
  elseif ($state == 'to_be_approved') {
    osha_workflow_moderate($node, OSHA_WORKFLOW_MODERATION_TYPE_APPROVE, OSHA_WORKFLOW_MODERATION_REJECT);
  }
}
