<?php
/**
 * @file
 * Code for the Osha Workflow feature.
 */

include_once 'osha_workflow.features.inc';
include_once 'osha_workflow.api.inc';

/* Publishing workflow roles */
define('OSHA_WORKFLOW_ROLE_EDITOR', 'Editor');
define('OSHA_WORKFLOW_ROLE_REVIEW_MANAGER', 'Review Manager');
define('OSHA_WORKFLOW_ROLE_PROJECT_MANAGER', 'Project Manager');
define('OSHA_WORKFLOW_ROLE_APPROVER', 'Approver');
// Drupal administrator.
define('OSHA_WORKFLOW_ROLE_ADMINISTRATOR', 'administrator');

/* Workflow states */
define('OSHA_WORKFLOW_STATE_DRAFT', 'draft');
define('OSHA_WORKFLOW_STATE_FINAL_DRAFT', 'final_draft');
define('OSHA_WORKFLOW_STATE_REJECTED', 'rejected');
define('OSHA_WORKFLOW_STATE_APPROVED', 'approved');
define('OSHA_WORKFLOW_STATE_TO_BE_REVIEWED', 'needs_review');
define('OSHA_WORKFLOW_STATE_TO_BE_APPROVED', 'to_be_approved');
define('OSHA_WORKFLOW_STATE_READY_TO_PUBLISH', 'ready_to_publish');
define('OSHA_WORKFLOW_STATE_PUBLISHED', 'published');

/**
 * Implements hook_views_api().
 */
function osha_workflow_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'osha_workflow'),
    'template path' => drupal_get_path('module', 'osha_workflow'),
  );
}

/**
 * Implements hook_menu().
 */
function osha_workflow_menu() {
  $items = array();
  $items['admin/config/workbench/access/managers'] = array(
    'title' => 'Project Managers',
    'description' => 'Assignment of project managers for each website section.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_workbench_project_managers_form', 1),
    'access arguments' => array('assign workbench access'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -12,
    'file' => 'osha_workflow.admin.inc',
  );

  $items['node/%node/approve'] = array(
    'title' => 'Approve',
    'description' => 'Approval page for the OSHA approval workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_node_approval_form', 1),
    'access callback' => 'osha_workflow_node_approval_access',
    'access arguments' => array(1),
    'file' => 'osha_workflow.admin.inc',
    'weight' => 10,
  );
  $items['node/%node/review'] = array(
    'title' => 'Review',
    'description' => 'Review page for the OSHA reviewing workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_node_review_form', 1),
    'access callback' => 'osha_workflow_node_review_access',
    'access arguments' => array(1),
    'file' => 'osha_workflow.admin.inc',
    'weight' => 9,
  );
  return $items;
}

/**
 * Permission access to approval local task.
 *
 * @param object $node
 *   Approved node
 *
 * @return null|string
 *   Access permission to the screen.
 */
function osha_workflow_node_approval_access($node) {
  if (OshaWorkflowPermissions::userCanAccessApprovalScreen($node)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}


/**
 * Permission access to review local task.
 *
 * @param object $node
 *   Reviewed node
 *
 * @return null|string
 *   Access permission to the screen.
 */
function osha_workflow_node_review_access($node) {
  if (OshaWorkflowPermissions::userCanAccessReviewScreen($node)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_entity_info().
 */
function osha_workflow_entity_info() {
  return array(
    'node_project_managers' => array(
      'label' => t('Node project manager'),
      'module' => 'osha_workflow',
      'controller class' => 'OshaWorkflowProjectManagerEntityController',
      'base table' => 'osha_workflow_node_project_managers',
      'entity keys' => array(
        'id' => 'npmid',
      ),
    ),
    'node_approval' => array(
      'label' => t('Node approval'),
      'module' => 'osha_workflow',
      'controller class' => 'OshaWorkflowApprovalItemController',
      'base table' => 'osha_workflow_node_approval',
      'entity keys' => array(
        'id' => 'apid',
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 *
 * We need this to define permissions granted to content moderators.
 */
function osha_workflow_permission() {
  $permissions = array();
  // Per state permissions. Used by workbench_moderation_node_access().
  $states = workbench_moderation_states();
  foreach ($states as $state) {
    $permissions['edit any content in ' . $state->name] = array(
      'title' => t('Edit any content in @state', array('@state' => $state->label)),
    );
  }
  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * {@inheritdoc}
 * @see http://openmonkey.blogspot.ro/2011/10/add-permissions-to-workbench-moderation.html
 */
function osha_workflow_node_access($node, $operation, $user) {
  if (isset($node->workbench_moderation) && $operation == 'update') {
    if (variable_get('workbench_moderation_per_node_type', FALSE)
        && !user_access('edit any content in ' . $node->workbench_moderation['current']->state, $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_theme().
 */
function osha_workflow_theme() {
  return array(
    'osha_workflow_approval_form' => array(
      'render element' => 'form',
      'file' => 'osha_workflow.admin.inc',
    ),
  );
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_transition($node, $old, $new) {
  // Review workflow.
  if ($old == OSHA_WORKFLOW_STATE_DRAFT && $new == OSHA_WORKFLOW_STATE_FINAL_DRAFT) {
    // Assign the default PM, if none assigned.
    if (!osha_workflow_get_project_manager($node->nid)) {
      $section = current($node->workbench_access);
      $project_manager = osha_workflow_get_default_project_manager($section);
      if ($project_manager) {
        drupal_set_message('Assigned default project manager of this section to the review process');
        osha_workflow_set_project_manager($node->nid, $project_manager->uid);
      }
    }
    // Assign the default approver list, if none assigned.
    if (!osha_workflow_get_node_approvers($node->nid, FALSE)) {
      $approvers = osha_workflow_get_node_approvers($node->nid);
      if ($approvers) {
        drupal_set_message('Assigned the default list of approvers for the approval process');
        $approvers_ids = array_map(function($user) { return $user->uid; }, $approvers);
        osha_workflow_set_node_approvers($node->nid, $approvers_ids);
      }
      else {
        drupal_set_message('No default approvers defined. Ask administrator to correcrly define the list of approvers.');
      }
    }
    OshaWorkflowNotifications::notifyOnChangeFromDraftToFinalDraft($node);
  }
  if ($old != OSHA_WORKFLOW_STATE_DRAFT && $new == OSHA_WORKFLOW_STATE_DRAFT) {
    OshaWorkflowNotifications::notifyOnChangeToDraft($node);
  }
  if (($old == OSHA_WORKFLOW_STATE_DRAFT || $old == OSHA_WORKFLOW_STATE_FINAL_DRAFT) && $new == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED) {
    OshaWorkflowNotifications::notifyOnChangeFromDraftOrFinalDraftToBeReviewed($node);
  }
  // Approval workflow.
  if ($new == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    //
  }
}

/**
 * Implements hook_workbench_moderation_states_next_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_states_next_alter(&$states, $current_state, $context) {
  if ($current_state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    $node = $context['node'];
    // Approver cannot change state of the current revision (which is TBA).
    if ($next_approver = osha_workflow_get_next_approver($node->nid)) {
      // Last approver needs the edit form for Accept/Reject
      if (!osha_workflow_is_last_approver($node)) {
        $user = $context['account'];
        if ($user->uid == $next_approver->uid) {
          $states = array();
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * {@inheritdoc}
 */
function osha_workflow_node_presave($node) {
  $state_current = isset($node->workbench_moderation_state_current) ? $node->workbench_moderation_state_current : NULL;
  $state_new = isset($node->workbench_moderation_state_new) ? $node->workbench_moderation_state_new : NULL;
  if ($state_new == OSHA_WORKFLOW_STATE_TO_BE_APPROVED && $state_current == $state_new) {
    if ($next_approver = osha_workflow_get_next_approver($node->nid)) {
      if ($next_approver != osha_workflow_is_last_approver($node)) {
        global $user;
        if ($user->uid == $next_approver->uid) {
          drupal_set_message('The control is passed to the next approver');
          osha_workflow_approve($node, OSHA_WORKFLOW_STATE_APPROVED);
        }
      }
    }
  }
}


/**
 * Implements hook_workbench_moderation_access_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_access_alter(&$access, $op, $node) {
  if ($op == 'view revisions' && user_access('view revisions')) {
    $access = 1;
  }
}

/**
 * Load a single node_approval entity.
 *
 * @param int $id
 *   Primary key
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function disabled_osha_workflow_node_approval_load($id, $reset = FALSE) {
  $ret = entity_load('node_approval', array($id), array(), $reset);
  return reset($ret);
}

/**
 * Load node_approval entities from database.
 *
 * @param array $ids
 *   An array of entity IDs, or FALSE to load all entities.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base table, where
 *   the keys are the database fields and the values are the values those
 *   fields must have. Instead, it is preferable to use EntityFieldQuery to
 *   retrieve a list of entity IDs loadable by this function.
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_workflow_node_approval_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('node_approval', $ids, $conditions, $reset);
}


/**
 * Implements hook_form_alter().
 */
function osha_workflow_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'workbench_moderation_moderate_form' && isset($form['node']['#value'])) {
    $node = $form['node']['#value'];
    $state = $node->workbench_moderation['current']->state;
    if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
      if ($current_moderator = osha_workflow_is_last_approver($node)) {
        global $user;
        if ($next = osha_workflow_get_next_approver($node->nid)) {
          if ($user->uid == $next->uid) {
            // Hijack the form & modify for voting purposes.
            hide($form['state']);
            $form['submit'] = array(
              '#type' => 'submit',
              '#value' => t('Approve'),
              '#submit' => array('osha_workflow_form_moderate_approve_submit'),
            );
            $form['reject'] = array(
              '#type' => 'submit',
              '#value' => t('Reject'),
              '#submit' => array('osha_workflow_form_moderate_reject_submit'),
            );
            $form['message'] = array(
              '#type' => 'textfield',
              '#prefix' => '<div>',
              '#title' => t('Leave a moderation message'),
              '#resizable' => FALSE,
              '#required' => FALSE,
              '#attributes' => array(
                'placeholder' => t('You can leave a note here'),
              ),
              '#suffix' => '<div>',
            );
            unset($form['message']);
          }
        }
      }
      else {
        $form['state']['#access'] = FALSE;
        $form['submit']['#access'] = FALSE;
      }
//      else {
//        // Add our own validation hook for transitions check.
//        $form['#validate'][] = 'osha_workflow_workbench_moderation_approval_form_validate';
//      }
    }
  }
}

function osha_workflow_workbench_moderation_approval_form_validate($form, $form_state) {
  $node = $form_state['values']['node'];
  $state = $form_state['values']['state'];
  if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    $approvers = osha_workflow_get_node_approvers($node->nid, FALSE);
    if (empty($approvers)) {
      form_set_error('', t('Cannot change state because the approval queue is empty. Use the approve tab to set the approver list'));
    }
  }
}

/**
 * Submit form hook for vote - when approved.
 */
function osha_workflow_form_moderate_approve_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = $values['node'];
  $state = $node->workbench_moderation['current']->state;
  if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    osha_workflow_approve($node, OSHA_WORKFLOW_STATE_APPROVED);
    // This was the last approver, approve.
    if (osha_workflow_is_last_approver($node)) {
      OshaWorkflowNotifications::notifyOnAcceptOrReject($node, OSHA_WORKFLOW_STATE_APPROVED);
      workbench_moderation_moderate($node, OSHA_WORKFLOW_STATE_APPROVED);
    }
  }
}

/**
 * Submit form hook for vote - when rejecting.
 */
function osha_workflow_form_moderate_reject_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = $values['node'];
  $state = $node->workbench_moderation['current']->state;
  if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    osha_workflow_approve($node, OSHA_WORKFLOW_STATE_REJECTED);
    if (osha_workflow_is_last_approver($node)) {
      // This was the last approver, reject.
      OshaWorkflowNotifications::notifyOnAcceptOrReject($node, OSHA_WORKFLOW_STATE_REJECTED);
      workbench_moderation_moderate($node, OSHA_WORKFLOW_STATE_REJECTED);
    }
  }
}
