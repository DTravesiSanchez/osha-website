<?php
/**
 * @file
 * Code for the Osha Workflow feature.
 */

include_once 'osha_workflow.features.inc';

/**
/**
 * Implements hook_entity_info().
 */
function osha_workflow_entity_info() {
  return array(
    'moderation_item' => array(
      'label' => t('Moderation item'),
      'module' => 'osha_workflow',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base_table' => 'moderation_item',
      'entity keys' => array(
        'id' => 'miid',
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 *
 * We need this to define permissions granted to content moderators.
 */
function osha_workflow_permission() {
  $permissions = array();
  $all_node_types = node_type_get_types();
  $moderated_types = array();
  foreach (array_keys($all_node_types) as $node_type) {
    if (variable_get('workbench_access_node_type_' . $node_type, 0)) {
      $moderated_types[] = $node_type;
    }
  }
  // Per state permissions. Used by workbench_moderation_node_access().
  $states = workbench_moderation_states();
  foreach ($states as $state) {
    $permissions['edit any content in ' . $state->name] = array(
      'title' => t('Edit any content in @state', array('@state' => $state->label)),
    );
  }
  foreach ($states as $state) {
    if (variable_get('workbench_moderation_per_node_type', FALSE)) {
      foreach ($moderated_types as $node_type) {
        $permissions["edit $node_type in " . $state->name] = array(
          'title' => t('Edit @node_type in @state', array('@node_type' => node_type_get_name($node_type), '@state' => $state->label)),
        );
      }
    }
  }
  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * {@inheritdoc}
 * @see http://openmonkey.blogspot.ro/2011/10/add-permissions-to-workbench-moderation.html
 */
function osha_workflow_node_access($node, $operation, $user) {
  if (isset($node->workbench_moderation) && $operation == 'update') {
    if (variable_get('workbench_moderation_per_node_type', FALSE)
        && !user_access('edit ' . $node->type . ' in ' . $node->workbench_moderation['current']->state, $user)
        && !user_access('edit any content in ' . $node->workbench_moderation['current']->state, $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_workbench_moderation_access_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_access_alter(&$access, $op, $node) {
  if ($op == 'view revisions' && user_access('view revisions')) {
    $access = 1;
  }
}

/**
 * This method creates the user roles required by the workflow.
 */
function osha_workflow_create_roles() {
  module_load_include('inc', 'osha_workflow', 'osha_workflow.permissions');
  $roles = array(
    'Editor' => osha_workflow_editor_permissions(),
    'Review Manager' => array(),
    'Project Manager' => array(),
    'Approver' => array(),
    'Final Approver' => array(),
    'Content Administrator' => array(),
  );

  foreach ($roles as $role_name => $permissions) {
    if ($role = user_role_load_by_name($role_name)) {
      // Nothing to do, really ...
    }
    else {
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
    }
    user_role_grant_permissions($role->rid, $permissions);
    // Grant workbench access for this role.
    workbench_access_role_section_save($role->rid, 'main-menu', 'menu');
  }
}

/**
 * Load a single moderation_item entity.
 *
 * @param int $id
 *   Primary key
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_workflow_moderation_item_load($id, $reset = FALSE) {
  return osha_workflow_moderation_item_load_multiple(array($id), array(), $reset);
}

/**
 * Load moderation_item entities from database.
 *
 * @param array $ids
 *   An array of entity IDs, or FALSE to load all entities.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base table, where
 *   the keys are the database fields and the values are the values those
 *   fields must have. Instead, it is preferable to use EntityFieldQuery to
 *   retrieve a list of entity IDs loadable by this function.
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_workflow_moderation_item_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('moderation_item', $ids, $conditions, $reset);
}
