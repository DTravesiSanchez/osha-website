<?php

/**
 * Implements hook_entity_info().
 */
function osha_alert_service_entity_info() {
  $info = array();
  $info['osha_alert_service'] = array(
    'label' => t('OSHA Alert'),
    'base table' => 'osha_alert_service',
    'entity keys' => array(
      'id' => 'id',
    ),
    'module' => 'osha_alert_service',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
  );
  return $info;
}

/**
 * Load a single entity of type osha_alert_service by its token.
 *
 * @param string $token
 *   Secret token.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_alert_service_osha_alert_service_load_by_token($token) {
  $query = db_select('osha_alert_service', 's')
    ->fields('s', array('id'))
    ->condition('token', $token);
  $ids = $query->execute()->fetchCol(0);
  if (isset($ids[0])) {
    return entity_load_single('osha_alert_service', $ids[0]);
  }
  return NULL;
}

/**
 * Load multiple entities of type osha_alert_service by emails.
 *
 * @param string $email
 *   User email.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_alert_service_osha_alert_service_load_by_email($email) {
  $query = db_select('osha_alert_service', 's')
    ->fields('s', array('id'))
    ->condition('email', $email);
  $ids = $query->execute()->fetchCol(0);
  if (!empty($ids)) {
    return entity_load('osha_alert_service', array_values($ids));
  }
  return NULL;
}


/**
 * Implements hook_menu().
 */
function osha_alert_service_menu() {
  $menu['alertservice/verify_alert'] = array(
    'title' => 'Validate Alert Service Subscription',
    'description' => 'Endpoint where subscribers validate their subscription',
    'page callback' => 'osha_alert_service_verify_alert_form',
    'page arguments' => array(),
    'access arguments' => array('view published content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -12,
  );
  $menu['alertservice/remove_alert'] = array(
    'title' => 'Remove Alert Service Subscription',
    'description' => 'Endpoint where subscribers remove from subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_alert_service_remove_alert_form'),
    'access arguments' => array('view published content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -12,
  );
  return $menu;
}

/**
 * Implements hook_block_info().
 */
function osha_alert_service_block_info() {
  $path = drupal_lookup_path('source', 'alertservice');
  $pages = 'alertservice';
  if ($node = menu_get_object('node', 1, $path)) {
    $pages .= "\r\nnode/" . $node->nid;
  }
  return array(
    'osha_alert_service_subscribe' => array(
      'info' => 'Alert Service Subscription',
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => $pages,
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}
 */
function osha_alert_service_block_view($delta = '') {
  $ret = array();
  switch ($delta) {
    case 'osha_alert_service_subscribe':
      $form = drupal_get_form('osha_alert_service_subscribe_form');
      $ret['content'] = array(
        '#type' => 'item',
        '#markup' => drupal_render($form),
      );
      break;
  }
  return $ret;
}

function osha_alert_service_subscribe_form($form, $form_state) {
  $form = array(
    '#tree' => FALSE,
  );
  global $user;
  $email = '';
  if (!empty($user->mail)) {
    $email = $user->mail;
  }
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#default_value' => $email,
    '#required' => TRUE,
  );

  $sections = workbench_access_active_options();
  // $tree = workbench_access_get_active_tree();
  // $sections = array();
  $form['section'] = array(
    '#type' => 'select',
    '#multiple' => TRUE, '#size' => 10,
    '#title' => t('Subjects of interest'),
    '#required' => TRUE,
    '#options' => $sections,
  );

  $types = array();
  $alltypes = node_type_get_types();
  foreach ($alltypes as $machine_name => $type) {
    $types[$machine_name] = $type->name;
  }
  $form['type'] = array(
    '#type' => 'select',
    '#multiple' => TRUE, '#size' => 10,
    '#title' => t('Item type'),
    '#required' => TRUE,
    '#options' => $types,
  );

  $form['schedule'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#title' => t('Item type'),
    '#options' => array(
      'daily' => t('Daily'),
      'weekly' => t('Weekly'),
      'monthly' => t('Monthly'),
    ),
    '#default_value' => 'monthly',
  );

  $languages = array();
  $alllanguages = language_list();
  unset($alllanguages['en']);
  foreach ($alllanguages as $code => $language) {
    $languages[$code] = $language->native;
  }
  $form['languages'] = array(
    '#type' => 'select',
    '#multiple' => TRUE, '#size' => 10,
    '#title' => t('Additional languages'),
    '#options' => $languages,
    '#description' => t('Alerts are sent in English. If the content is translated, you can choose to receive it in additional languages.'),
  );

  $form['help'] = array(
    '#type' => 'item',
    '#markup' => t('<b>Note</b>: In order to choose more than one item from the list, press the key CTRL on your keyboard (CMD on Mac), and select the item with your mouse.'),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#name' => 'subscribe',
    '#value' => t('Subscribe'),
    '#attributes' => array('class' => array('container-inline')),
  );
  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * {@inheritdoc}
 */
function osha_alert_service_subscribe_form_validate($form, $form_state) {
  if (empty($form_state['values']['email']) || !valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('Please input an valid email address'));
  };
}

/**
 * Implements hook_form_submit().
 *
 * {@inheritdoc}
 */
function osha_alert_service_subscribe_form_submit($form, $form_state) {
  $values = $form_state['values'];
  $filters = array(
    'section' => array_values($values['section']),
    'type' => array_values($values['type']),
    'languages' => array_values($values['languages']),
  );
  $created = time();
  $email = $values['email'];
  $token = sha1('TIMESTAMP:' . $created);
  $entity = entity_create(
    'osha_alert_service',
    array(
      'email' => $email,
      'filters' => json_encode($filters),
      'schedule' => $values['schedule'],
      'created' => $created,
      'token' => $token,
      'confirmed' => 0,
      'last_alert' => NULL,
    )
  );
  entity_save('osha_alert_service', $entity);
  drupal_set_message(t('Your request has been registered. Please check your email for further instructions'));

  global $language;
  $params = array(
    'email' => $email,
    'token' => $token,
    'language' => $language->language,
  );
  drupal_mail('osha_alert_service', 'subscribe', $email, $language->language, $params);
}

/**
 * Menu handler for alert verification.
 */
function osha_alert_service_remove_alert_form($form, &$form_state) {
  $form = array(
    '#tree' => FALSE,
  );
  $request = drupal_get_query_parameters();
  if (isset($request['token']) && $entity = osha_alert_service_osha_alert_service_load_by_token($request['token'])) {
    $form_state['entity'] = $entity;
    $form['email'] = array(
      '#type' => 'item',
      '#markup' => t(
        'Unsubscribe !email from receiving EU-OSHA Alert Service notifications?',
        array('!email' => $entity->email)
      ),
    );
    $form['actions']['submit'] = array(
      '#type'       => 'submit',
      '#name'       => 'unsubscribe',
      '#value'      => t('Unsubscribe'),
      '#attributes' => array('class' => array('container-inline')),
    );
  }
  else {
    drupal_set_message(t("Invalid request, and I hope it's a test!"), 'error');
  }
  return $form;
}

function osha_alert_service_remove_alert_form_submit($form, $form_state) {
  if (isset($form_state['entity'])) {
    $entity = $form_state['entity'];
    $entity->confirmed = 1;
    entity_delete('osha_alert_service', $form_state['entity']->id);
    drupal_set_message(t('You have been successfully unsubscribed from alert'));
    drupal_goto('<front>');
  }
}

/**
 * Menu handler for alert removal.
 */
function osha_alert_service_verify_alert_form() {
  $request = drupal_get_query_parameters();
  if (isset($request['token']) && $entity = osha_alert_service_osha_alert_service_load_by_token($request['token'])) {
    if ($entity->confirmed <> 1) {
      $entity->confirmed = 1;
      if (entity_save('osha_alert_service', $entity)) {
        drupal_set_message(t("You subscription has been confirmed, thank you"));
      }
    }
    else {
      drupal_set_message(t("You subscription is already confirmed, there's nothing you need to do"), 'warning');
    }
  }
  else {
    drupal_set_message(t("Hmm ... an invalid request, I hope that's a test!"), 'error');
  }
  drupal_goto('<front>');
}

/**
 * Implements hook_mail().
 *
 * {@inheritdoc}
 */
function osha_alert_service_mail($key, &$message, $params) {
  global $base_url;
  $keys = array();
  $params['base_url'] = $base_url;
  foreach ($params as $k => $v) {
    $keys[] = '[' . $k . ']';
  }

  switch ($key) {
    case 'subscribe':
      $subject = variable_get('osha_mail_template_alert_service_subscribe_subject', 'Your subscription to OSHA Alert Service');
      $body = variable_get('osha_mail_template_alert_service_subscribe_body',
<<<EOT
EU-OSHA received a request to start sending alerts to [email].

Verify this EU-OSHA alert request: [base_url]/[language]/alertservice/verify_alert?token=[token]
Cancel this EU-OSHA alert request: [base_url]/[language]/alertservice/remove_alert?token=[token]
If you are not able to click on the link, you can cut and paste it into your browser's address bar.

If you did not initiate this request or believe it was sent in error you can safely ignore this message.
Thanks,
The EU-OSHA Alerts Team
EOT
      );
      $message['subject'] = $subject;
      $message['body'] = str_replace($keys, array_values($params), $body);
      break;
  }
}
