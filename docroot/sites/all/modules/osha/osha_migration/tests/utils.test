<?php

/**
 * Class OshaWebTestCase is the base class for OSHA tests.
 *
 * Correctly enables all instance modules in the appropriate order.
 */
abstract class OshaWebTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */

  public $modulePath;
  public $dataPath;
  protected $userAdmin;
  protected $permissionsAdmin = array();

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules = array_merge(array('file', 'file_entity'), $modules);
    parent::setUp($modules);
    require DRUPAL_ROOT . '/../drush/drushrc.php';
    if (!empty($options['init-modules'])) {

      $modules = $options['init-modules'];
      $modules[] = 'osha_taxonomies_uuid';
      unset($modules[array_search('file_entity', $modules)]);
      unset($modules[array_search('osha_search', $modules)]);

      if (!module_enable($modules)) {
        foreach ($modules as $module) {
          if (!module_enable(array($module))) {
            drupal_set_message('Cannot enable module: ' . $module, 'error');
          }
        }
      }
    }

    $this->setDataDirTestData();
    $this->modulePath = drupal_get_path('module', 'osha_migration');
  }

  /**
   * Set the data directory to test directory.
   */
  protected function setDataDirTestData() {
    $data_path = drupal_realpath(drupal_get_path('module', 'osha_migration') . '/data/test');
    variable_set('osha_data_dir', $data_path);
    $this->dataPath = $data_path;
  }

  /**
   * Set the data directory to exported OSHA data.
   */
  protected function setDataDirExportedData() {
    $cfg = MigrationUtil::getProjectConfig();
    variable_set('osha_data_dir', $cfg['variables']['osha_data_dir']);
  }

  public static function oshaAssertEqualTaxonomyTerms($entity, $entity_taxon_field, $taxon_field, $raw_taxonomy_terms) {
    $terms = array();
    $raw_values = array_unique(array_map('trim', explode(',', $raw_taxonomy_terms)));
    $entity_values = array();
    if (!empty($entity->{$entity_taxon_field}[LANGUAGE_NONE])) {
      foreach ($entity->{$entity_taxon_field}[LANGUAGE_NONE] as $term) {
        $terms[] = $term['tid'];
      }
      $terms = taxonomy_term_load_multiple($terms);
      $entity_values = array();
      foreach ($terms as $term) {
        $entity_values[] = $term->{$taxon_field}[LANGUAGE_NONE][0]['value'];
      }
    }
    $diff = array_diff($entity_values, $raw_values);
    return empty($diff);
  }

  public function oshaAssertEqualFileMultilingual($entity, $entity_field_name, $source, $source_field_name, $destination_path = "public://") {
    foreach ($source[$source_field_name] as $language => $image) {
      if (!empty($image)) {
        $file_name = $entity->{$entity_field_name}[$language][0]['uri'];
        $file_name = str_replace($destination_path, '', $file_name);
        $this->assertEqual($file_name, $image);
      }
    }
  }

  public function oshaAssertEqualFileMultilingMultival($entity, $entity_field_name, $source, $source_field_name, $destination_path = "public://") {
    foreach ($source[$source_field_name] as $language => $images) {
      if (!empty($images)) {
        $images = explode(',', $images);
        $images = array_map('trim', $images);
        if (count($images) > 1) {
          foreach ($images as $index => $path) {
            $file_name = $entity->{$entity_field_name}[$language][$index]['uri'];
            $file_name = str_replace($destination_path, '', $file_name);
            $this->assertEqual($file_name, $path);
          }
        }
        else {
          $file_name = $entity->{$entity_field_name}[$language][0]['uri'];
          $file_name = str_replace($destination_path, '', $file_name);
          $this->assertEqual($file_name, current($images));
        }
      }
    }
  }

  /**
   * Will create a user with admin permissions and log it in.
   *
   * @param array $additional_permissions
   *   Additional permissions that will be granted to admin user.
   * @param boolean $reset_permissions
   *   Flag to determine if default admin permissions will be replaced by
   *   $additional_permissions.
   *
   * @return object
   *   Newly created and logged in user object.
   */
  protected function loginAsAdmin($additional_permissions = array(), $reset_permissions = FALSE) {
    $permissions = $this->permissionsAdmin;

    if ($reset_permissions) {
      $permissions = $additional_permissions;
    }
    elseif (!empty($additional_permissions)) {
      $permissions = array_merge($permissions, $additional_permissions);
    }

    $this->userAdmin = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->userAdmin);
    return $this->userAdmin;
  }
}

/**
 * Class MigrationUtilTest test migration utilities.
 */
class MigrationUtilTest extends OshaWebTestCase {

  private $tmpFile = NULL;

  private $selected_terms;

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Utilities testing',
      'description' => 'Tests the migration utilities',
      'group' => 'OSHA',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    $this->tmpFile = file_directory_temp() . '/test.tmp';
    file_put_contents($this->tmpFile, 'Delete me ...');
    $this->assertTrue(file_exists($this->tmpFile));
    $this->assertTrue(is_readable($this->tmpFile));

    $voc = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_TAGS);

    $terms = taxonomy_get_tree($voc->vid);
    $this->assertEqual(36, count($terms));

    $selected_terms = array(
      '2dd789d4-c119-466a-8791-85c8635d9ca1' => 'Accident prevention',
      '123af0ff-7a0b-42a9-b0c3-de32c80522fb' => 'Dangerous substances',
      '84a1bd37-d7af-4d5f-9c14-bb25e3d0d28c' => 'Health Care',
    );
    $some_terms = entity_uuid_load('taxonomy_term', array_keys($selected_terms));
    foreach ($some_terms as $term) {
      $this->assertEqual($selected_terms[$term->uuid], $term->name);
    }
    $this->selected_terms = $some_terms;
  }

  /**
   * {@inheritdoc}
   */
  public function tearDown() {
    unlink($this->tmpFile);
    parent::tearDown();
  }

  /**
   * Test getSourceFile().
   */
  public function testGetSourceFile() {
    try {
      MigrationUtil::getSourceFile(NULL);
      $this->fail('Throw exception about missing `file_name` argument');
    }
    catch(Exception $e) {}

    try {
      MigrationUtil::getSourceFile(array());
      $this->fail('Throw exception about missing `file_name` argument');
    }
    catch(Exception $e) {}

    $arguments = array('file_name' => $this->tmpFile);
    $subject = MigrationUtil::getSourceFile($arguments);
    $this->assertEqual($this->tmpFile, $subject);
  }


  /**
   * Test findTidByTaxonomyField().
   */
  public function testFindTidByTaxonomyField() {
    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' accident_prevention ', ' dangerous_substances', '  '),
      'field_tags_code',
      OSHA_TAXONOMIES_TAGS
    );
    $this->assertEqual(2, count($subject));
    foreach ($subject as $tid) {
      $this->assertTrue(array_key_exists($tid, $this->selected_terms));
    }

    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' dangerous_substances', 'x'),
      'field_tags_code',
      OSHA_TAXONOMIES_TAGS
    );
    $this->assertEqual(1, count($subject));
    foreach ($subject as $tid) {
      $this->assertTrue(array_key_exists($tid, $this->selected_terms));
    }

    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' Dangerous substances ', ' Accident prevention', '  '),
      'name_field',
      OSHA_TAXONOMIES_TAGS,
      'en'
    );
    $this->assertEqual(2, count($subject));
    foreach ($subject as $tid) {
      $this->assertTrue(array_key_exists($tid, $this->selected_terms));
    }

    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' Prevenirea accidentelor ', ' SubstanÅ£e periculoase', '  '),
      'name_field',
      OSHA_TAXONOMIES_TAGS,
      'ro'
    );
    $this->assertEqual(2, count($subject));
    foreach ($subject as $tid) {
      $this->assertTrue(array_key_exists($tid, $this->selected_terms));
    }

    $subject = MigrationUtil::findTidByTaxonomyField(
      NULL,
      'name_field',
      OSHA_TAXONOMIES_TAGS,
      'ro'
    );
    $this->assertEqual(0, count($subject));
  }

  /**
   * Test decodeTagsTerms().
   */
  public function testDecodeTagsTerms() {
    $subject = MigrationUtil::decodeTagsTerms(
      ' accident_prevention,  dangerous_substances, accident_prevention::construction_work,
      accident_prevention::ds, accident_prevention::electricity, accident_prevention::emergency_planning,
      accident_prevention::falls, accident_prevention::fire'
    );
    $this->assertEqual(2, count($subject));
    foreach ($subject as $tid) {
      $this->assertTrue(array_key_exists($tid, $this->selected_terms));
    }

    $subject = MigrationUtil::decodeTagsTerms(NULL);
    $this->assertEqual(0, count($subject));

    $subject = MigrationUtil::decodeTagsTerms(
      'accident_prevention, healthcare, non_tag',
      'field_tags_code', TRUE
    );
    $this->assertEqual(2, count($subject));
    foreach ($subject as $tid) {
      $this->assertTrue(array_key_exists($tid, $this->selected_terms));
    }
  }

  /**
   * Test parseRelatedItemsString().
   */
  public function testParseRelatedItemsString() {
    $input = '';
    $subject = MigrationUtil::parseRelatedItemsString($input);
    $this->assertEqual(array('items' => NULL, 'files' => NULL), $subject);

    $input = '/en/publications/en/p2, /en/publications/p3, /file1.pptx, /file2.ppt';
    $subject = MigrationUtil::parseRelatedItemsString($input);
    $this->assertEqual(2, count($subject['items']));
    $this->assertTrue(in_array('publications/en/p2', $subject['items']));
    $this->assertTrue(in_array('publications/p3', $subject['items']));

    $this->assertEqual(2, count($subject['files']));
    $this->assertTrue(in_array('/file1.pptx', $subject['files']));
    $this->assertTrue(in_array('/file2.ppt', $subject['files']));
  }

  /**
   * Test findTermByFieldValue().
   */
  public function testFindTermByFieldValue() {
    $tid = MigrationUtil::findTermByFieldValue('accident_prevention', 'field_tags_code');
    $this->assertTrue(array_key_exists($tid, $this->selected_terms));

    $tid = MigrationUtil::findTermByFieldValue('SubstanÅ£e periculoase', 'name_field');
    $this->assertTrue(array_key_exists($tid, $this->selected_terms));

    $tid = MigrationUtil::findTermByFieldValue('Dangerous substances', 'name', TRUE);
    $this->assertTrue(array_key_exists($tid, $this->selected_terms));
  }

  /**
   * Test cleanMigratedFileField().
   */
  public function testCleanMigratedFileField() {
    $file = drupal_get_path('module', 'osha_migration') . "/data/test/test_clean_migrated_file_field_object.json";
    $row = json_decode(file_get_contents($file), TRUE);
    $test_object = (object) $row["test_object"];
    $witness = (object) $row["witness"];

    MigrationUtil::cleanMigratedFileField($test_object, 'file_array', 'public://something/something');
    MigrationUtil::cleanMigratedFileField($test_object, 'file', 'public://something/something');

    $this->assertEqual($test_object, $witness, "The path mapping is correct");
  }
}
