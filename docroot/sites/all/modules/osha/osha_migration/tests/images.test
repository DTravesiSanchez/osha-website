<?php

/**
 * Class OshaMigrateImagesListMock mocks OshaMigrateImagesListCSV
 */
class OshaMigrateImagesListMock extends OshaMigrateImagesListCSV {

  /**
   * {@inheritdoc}
   */
  public function __construct() {
    parent::__construct(drupal_get_path('module', 'osha_migration') . '/data/test/export/images.txt');
  }
}


/**
 * Class MigrateOshaImagesTest tests publication content type migration.
 */
class MigrateOshaImagesTest extends OshaWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Images migration',
      'description' => 'Tests the migration of images',
      'group' => 'OSHA',
    );
  }

  /**
   * Test the migration.
   */
  public function testMigration() {
    $data_path = osha_migration_get_data_dir();
    $data_export_path  = osha_migration_get_data_dir(OSHA_MIGRATION_EXPORT_DIRECTORY);
    $module_path = drupal_get_path('module', 'osha_migration');

    $source_file = $module_path . '/data/test/nace_codes.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_NACE_CODES, 'MigrateOshaTaxonomyNaceCodes', $source_file);

    $source_file = $module_path . '/data/tags.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_TAGS, 'MigrateOshaTaxonomyTags', $source_file);

    $source_file = $module_path . '/data/test/thesaurus.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_THESAURUS, 'MigrateOshaTaxonomyThesaurus', $source_file);

    $source_file = $data_export_path . '/images.txt';
    $result = MigrationUtil::runMigration(OSHA_MIGRATION_IMAGES, 'OshaMigrateImages', $source_file);

    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'file')
      ->entityCondition('bundle', 'image')
      ->propertyCondition('status', 1);
    $result = $query->execute();

    $files_fids = array();
    if (isset($result['file'])) {
      $files_fids = array_keys($result['file']);
    }
    $files = file_load_multiple($files_fids);

    $class = new OshaMigrateImagesListCSV(
      $source_file
    );
    $data = $class::$csvData;

    // Second deleted, first and third good.
    $this->assertEqual(2, count($files));

    foreach ($files as $file) {
      $path = str_replace(OSHA_MIGRATE_IMAGES_DEST_DIR, '', $file->uri);
      $raw_file = $data[$path];
      $this->assertEqual($file->filename, $raw_file['title']);

      $this->assertEqual(
        $file->field_file_description[LANGUAGE_NONE][0]['value'],
        $raw_file['description']
      );

      $this->assertEqual(
        $file->field_language[LANGUAGE_NONE][0]['value'],
        $raw_file['language']
      );

      $raw_tags = $raw_file['subject'];
      if (!empty($raw_file['subcategory'])) {
        $raw_tags .= ', ' . $raw_file['subcategory'];
      }

      $tags = self::oshaAssertEqualTaxonomyTerms(
        $file, 'field_tags', 'field_tags_code',
        $raw_tags);
      $this->assertTrue($tags);

      $tags = self::oshaAssertEqualTaxonomyTerms(
        $file, 'field_thesaurus', 'field_thesaurus_code',
        $raw_file['multilingual_thesaurus']);
      $this->assertTrue($tags);


      $tags = self::oshaAssertEqualTaxonomyTerms(
        $file, 'field_nace_codes', 'field_nace_code',
        $raw_file['nace']);
      $this->assertTrue($tags);
    }
  }
}
