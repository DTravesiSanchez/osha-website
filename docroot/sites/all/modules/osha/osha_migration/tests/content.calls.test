<?php

class MigrateOshaCallsTest extends OshaWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Calls migration',
      'description' => 'Tests the migration of Calls content',
      'group' => 'OSHA',
    );
  }

  /**
   * Test the migration.
   */
  public function testMigration() {
    $data_export_path  = osha_migration_get_data_dir(OSHA_MIGRATION_EXPORT_DIRECTORY);
    $source_file = $data_export_path . '/calls.txt';
    $result = MigrationUtil::runMigration(OSHA_MIGRATION_CONTENT_TYPE_CALLS, 'MigrateOshaCalls', $source_file);
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', OSHA_CALLS_CONTENT_TYPE_CALLS)
      ->propertyCondition('status', 1);
    $result = $query->execute();
    $nodes = array();
    if (isset($result['node'])) {
      $nodes_nids = array_keys($result['node']);
      $nodes = entity_load('node', $nodes_nids);
    }

    $class = new CallsMigrateList($source_file);
    $class->getIdList();
    $data = $class::$data;
    // Second broken, First good.
    $this->assertEqual(1, count($nodes));

    $node = current($nodes);
    $path = path_load(array('source' => 'node/' . $node->nid, 'language' => 'en'));
    $path = $path['alias'];
    $witness = $data[$path];

    $this->assertEqual(strtotime($witness['creation_date']), $node->created);
    $this->assertEqual(strtotime($witness['modification_date']), $node->changed);
    $this->assertEqual(
      strtotime($witness['publication_date']),
      strtotime($node->field_publication_date[LANGUAGE_NONE][0]['value'])
    );
    $this->assertEqual(
      strtotime($witness['deadline']),
      strtotime($node->field_calls_deadline[LANGUAGE_NONE][0]['value'])
    );

    $languages = language_list();
    foreach ($witness['path'] as $lang_code => $path) {
      $this->drupalGet(
        $path,
        array("language" => $languages[$lang_code])
      );
      $this->assertText($node->title_field[$lang_code][0]['value']);
    }

    foreach ($witness['title_field'] as $language => $title) {
      $this->assertEqual($title, $node->title_field[$language][0]['value']);
    }

    foreach ($witness['description'] as $language => $description) {
      if (!empty($description)) {
        $this->assertEqual(
          str_replace('<@#&>', '"', $description),
          $node->field_summary[$language][0]['value']);
      }
      else {
        $this->assertTrue(!isset($node->field_summary[$language]));
      }
    }

    foreach ($witness['text'] as $language => $text) {
      if (!empty($text)) {
        $this->assertEqual(
          str_replace('<@#&>', '"', $text),
          $node->body[$language][0]['value']);
      }
      else {
        $this->assertTrue(!isset($node->body[$language]));
      }
    }

    foreach ($witness['info'] as $language => $info) {
      if (!empty($info)) {
        $this->assertEqual(
          str_replace('<@#&>', '"', $info),
          $node->field_calls_info[$language][0]['value']);
      }
      else {
        $this->assertTrue(!isset($node->field_calls_info[$language]));
      }
    }

    foreach ($witness['author'] as $language => $author) {
      $this->assertEqual($author, $node->field_author[$language][0]['value']);
    }

    foreach ($witness['contract_notice'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_contract_notice[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }

    foreach ($witness['contract_notice_corrigendum'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_contract_n_corrig[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }

    foreach ($witness['technical_specifications'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_technical_specs[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }

    foreach ($witness['amendments'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_amendments[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }

    foreach ($witness['agency_responses'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_agency_responses[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }

    foreach ($witness['award_notice'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_award_notice[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }

    foreach ($witness['award_notice_corrigendum'] as $language => $file) {
      if (!empty($file)) {
        $file_name = $node->field_calls_award_n_corrig[$language][0]['uri'];
        $file_name = str_replace('public://calls/documents', '', $file_name);
        $this->assertEqual($file_name, $file);
      }
    }
  }
}
