<?php

include_once 'osha_linkchecker.features.inc';

/**
 * Implements hook_entity_info().
 */
function osha_linkchecker_entity_info() {
  return array(
    'linkchecker_link' => array(
      'label' => t('Linkchecker Links'),
      'module' => 'osha_linkchecker',
      'controller class' => 'OshaLinkCheckerController',
      'base table' => 'linkchecker_link',
      'entity keys' => array(
        'id' => 'lid',
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
    'linkchecker_node' => array(
      'label' => t('Linkchecker Node Links'),
      'module' => 'osha_linkchecker',
      'controller class' => 'OshaLinkCheckerController',
      'base table' => 'linkchecker_node',
      'entity keys' => array(
        'id' => 'lid',
//        'nid' => 'nid',
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function osha_linkchecker_entity_property_info() {
  $info = array();

  // Add meta-data for linkchecker_link entity.
  $properties = &$info['linkchecker_link']['properties'];
  $properties['code'] = array(
    'label' => t("Code"),
    'type' => 'integer',
    'description' => t("HTTP status code from link checking."),
    'options list' => 'osha_linkchecker_get_http_statuses',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'entity views field' => TRUE,
    'schema field' => 'code',
  );
  $properties['lid'] = array(
    'label' => t("Link ID"),
    'type' => 'linkchecker_node',
    'description' => t("LID of the link"),
    'getter callback' => 'entity_metadata_node_get_properties',
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'lid',
  );
  $properties['url'] = array(
    'label' => t("URL"),
    'type' => 'text',
    'description' => t("The full qualified link."),
    'getter callback' => 'entity_property_verbatim_get',
    'schema field' => 'url',
  );

  // Add meta-data for linkchecker_node entity.
  $properties = &$info['linkchecker_node']['properties'];
  $properties['nid'] = array(
    'label' => t("Node"),
    'type' => 'node',
    'description' => t("The node that link was found on"),
    'getter callback' => 'entity_metadata_node_get_properties',
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'nid',
  );

  return $info;
}

/**
 * Implements hook_views_query_alter().
 */
function osha_linkchecker_views_query_alter(&$view, &$query) {
  if ($view->name == 'broken_links') {
    // Fix workbench Access fitler.
    $query->where[2]['conditions'][0]['field'] = 'linkchecker_node_linkchecker_link.nid';
  }
}

/**
 * Http statuses.
 */
function osha_linkchecker_get_http_statuses() {
  return array(
    -101 => 'Connection Timed Out',
    100 => 'Continue',
    101 => 'Switching Protocols',
    200 => 'OK',
    201 => 'Created',
    202 => 'Accepted',
    203 => 'Non-Authoritative Information',
    204 => 'No Content',
    205 => 'Reset Content',
    206 => 'Partial Content',
    300 => 'Multiple Choices',
    301 => 'Moved Permanently',
    302 => 'Found',
    303 => 'See Other',
    304 => 'Not Modified',
    305 => 'Use Proxy',
    307 => 'Temporary Redirect',
    400 => 'Bad Request',
    401 => 'Unauthorized',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    407 => 'Proxy Authentication Required',
    408 => 'Request Time-out',
    409 => 'Conflict',
    410 => 'Gone',
    411 => 'Length Required',
    412 => 'Precondition Failed',
    413 => 'Request Entity Too Large',
    414 => 'Request-URI Too Large',
    415 => 'Unsupported Media Type',
    416 => 'Requested range not satisfiable',
    417 => 'Expectation Failed',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    502 => 'Bad Gateway',
    503 => 'Service Unavailable',
    504 => 'Gateway Time-out',
    505 => 'HTTP Version not supported',
  );
}
