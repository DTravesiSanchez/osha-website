<?php
/**
 * @file
 * Code for the OSHA Translation Management feature.
 */

include_once 'osha_tmgmt.features.inc';

define('OSHA_TMGMT_DEFAULT_SOURCE_LANGUAGE', 'en');
define('OSHA_TMGMT_DEFAULT_TARGET_LANGUAGE', 'ro');
define('OSHA_TMGMT_WORDS_PER_PAGE', 250);

define('OSHA_TMGMT_JOB_PRIORITY_HIGH', 2);
define('OSHA_TMGMT_JOB_PRIORITY_LOW', 1);
define('OSHA_TMGMT_JOB_PRIORITY_NORMAL', 0);

define('OSHA_TMGMT_TRANS_VALID_GROUP', 'translators_group');
define('OSHA_TMGMT_TRANS_VALID_APPROVED', 'approved');
define('OSHA_TMGMT_TRANS_VALID_REJECTED', 'rejected');

define('OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired', 5);
define('OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidated', 6);
define('OSHA_TMGMT_JOB_ITEM_STATE_TranslatedReadyToPublish', 7);

define('OSHA_TMGMT_CONTENT_VALIDATOR_STATUS_APPROVED', 'approved');
define('OSHA_TMGMT_CONTENT_VALIDATOR_STATUS_REJECTED', 'rejected');

include_once 'osha_tmgmt.entity.inc';
module_load_include('inc', 'osha_tmgmt', 'osha_tmgmt.workflow');
module_load_include('inc', 'osha_tmgmt', 'osha_tmgmt.permissions');

function osha_tmgmt_menu() {
  $items['node/%node/layout-validation/%tmgmt_job_item'] = array(
    'page callback' => 'osha_tmgmt_layout_validation_node_preview',
    'page arguments' => array(1, 3),
    'access arguments' => array('preview layout validation'),
    'type' => MENU_CALLBACK,
    'file' => 'osha_tmgmt.workflow.inc',
  );

  $items['admin/tmgmt/items/%tmgmt_job_item/content-validators'] = array(
    'title' => 'Content Validators',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_tmgmt_job_item_validators_form', 3),
    'access arguments' => array('view translation content validators'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'osha_tmgmt.workflow.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function osha_tmgmt_menu_alter(&$items) {
  unset($items['admin/tmgmt/items/%entity_object']['access callback']);
  $items['admin/tmgmt/items/%entity_object']['access arguments']
    = array('view translation job item');
}

/**
 * Implements hook_permission().
 */
function osha_tmgmt_permission() {
  return osha_tmgmt_extra_permissions();
}

/**
 * Implements hook_post_features_revert().
 */
function osha_tmgmt_post_features_revert($component) {
  // Add permissions for managing translators_group entity.
  if ($component == 'entity_collection_bundles') {
    $permissions = array(
      'create translators_group entity collections',
      'edit translators_group entity collections',
      'view translators_group entity collections',
      'delete translators_group entity collections',
      'add content to translators_group entity collections',
      'manage content in translators_group entity collections',
    );

    $role = user_role_load_by_name(OSHA_WORKFLOW_ROLE_TRANSLATION_MANAGER);
    user_role_grant_permissions($role->rid, $permissions);
  }

}

/**
 * Implements hook_schema_alter().
 */
function osha_tmgmt_schema_alter(&$schema) {
  if (isset($schema['tmgmt_job_item'])) {
    $schema['tmgmt_job_item']['fields']['target_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'not null' => FALSE,
      'description' => 'The language the data should be translated to.',
    );
    $schema['tmgmt_job_item']['fields']['source_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'default' => '',
      'not null' => FALSE,
      'description' => 'The default entity language',
    );
    $schema['tmgmt_job_item']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job_item']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job_item']['fields']['eid'] = array(
      'description' => 'Translation Validators groups',
      'type' => 'int',
      'unsigned' => TRUE,
      'default' => NULL,
      'not null' => FALSE,
    );
  }
  if (isset($schema['tmgmt_job'])) {
    $schema['tmgmt_job']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job']['fields']['priority'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Urgency of the translation (0=normal/1=high)',
    );
  }
}

/**
 * Implements hook_entity_info().
 */
function osha_tmgmt_entity_info() {
  return array(
    'translation_validator' => array(
      'label' => t('Translation Validators'),
      'module' => 'osha_tmgmt',
      'controller class' => 'OshaTMGMTValidatorItemController',
      'base table' => 'osha_tmgmt_job_trans_validators',
      'entity keys' => array(
        'id' => 'tvid',
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function osha_tmgmt_entity_property_info() {
  $info = array();

  // Add meta-data for node_approval entity.
  $properties = &$info['translation_validator']['properties'];
  $properties['user'] = array(
    'label' => t("User"),
    'type' => 'user',
    'description' => t("The User that must Validate the Translation"),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['node'] = array(
    'label' => t("Node"),
    'type' => 'node',
    'description' => t("The Node that needs validation of the translation."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'nid',
  );
  $properties['tjiid'] = array(
    'label' => t("Job Item"),
    'type' => 'tmgmt_job_item',
    'description' => t("The Job Item that needs validation of the translation."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'tjiid',
  );
  $properties['approved'] = array(
    'label' => t("Translation Validation Status"),
    'type' => 'text',
    'options list' => 'osha_tmgmt_translation_validation_options',
    'description' => t("The review give by Translatoion Validator."),
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'entity views field' => TRUE,
//    'required' => TRUE,
    'schema field' => 'approved',
  );
  $properties['next'] = array(
    'label' => t("Next"),
    'type' => 'integer',
    'description' => t("If the user is next who needs to approve"),
    'getter callback' => 'entity_property_verbatim_get',
    'schema field' => 'next',
  );
  $properties['deleted'] = array(
    'label' => t("Deleted vote"),
    'type' => 'integer',
    'description' => t("If the relation is no longer valid."),
    'getter callback' => 'entity_property_verbatim_get',
    'schema field' => 'deleted',
  );

  return $info;
}

function osha_tmgmt_entity_property_info_alter(&$info) {
  $info['tmgmt_job_item']['properties']['state']['options list'] = 'osha_tmgmt_get_job_item_states';
}

/**
 * Implements hook_theme().
 */
function osha_tmgmt_theme() {
  return array(
    'osha_tmgmt_job_item_validators_form_table' => array(
      'render element' => 'form',
      'file' => 'osha_tmgmt.workflow.inc',
    ),
  );
}

/**
 * Implements hook_tmgmt_file_format_info().
 */
function osha_tmgmt_tmgmt_file_format_plugin_info() {
  return array(
    'xml' => array(
      'label' => t('CDT XML file'),
      'plugin controller class' => 'OSHATranslatorFileformatCDT',
    ),
  );
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function osha_tmgmt_tmgmt_translator_plugin_info_alter(&$info) {
  if (isset($info['file'])) {
    $info['file']['plugin controller class'] = 'OSHATMGMTFileTranslatorPluginController';
  }
}

/**
 * Implements hook_tmgmt_source_plugin_info_alter().
 */
function osha_tmgmt_tmgmt_source_plugin_info_alter(&$info) {
  $info['entity']['plugin controller class'] = 'OSHATMGMTEntitySourcePluginController';
  // $info['node']['plugin controller class'] = 'OSHATMGMTNodeSourcePluginController';
  $info['i18n_string']['plugin controller class'] = 'OSHATMGMTI18nStringSourcePluginController';
}

/**
 * Implements hook_entity_info_alter().
 */
function osha_tmgmt_entity_info_alter(&$entity_info) {
  if (isset($entity_info['tmgmt_job_item'])) {
    $entity_info['tmgmt_job_item']['views controller class'] = 'OshaTMGMTJobItemViewsController';
    $entity_info['tmgmt_job_item']['entity class'] = 'OshaTMGMTJobItem';
    $entity_info['tmgmt_job_item']['metadata controller class'] = 'OshaTMGMTJobItemMetadataController';
  }
  if (isset($entity_info['tmgmt_job'])) {
    $entity_info['tmgmt_job']['views controller class'] = 'OshaTMGMTJobViewsController';
    // Override tmgmt_job_access to allow 'Translator Liaison' to view the jobs.
    $entity_info['tmgmt_job']['access callback'] = 'osha_tmgmt_job_access';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hide unwanted translation sources tabs from tmgmt interface.
 */
function osha_tmgmt_menu_local_tasks_alter(&$items) {
  $disable = array(
    'admin/tmgmt/sources/i18n_string_taxonomy_term',
    'admin/tmgmt/sources/i18n_string_taxonomy_vocabulary',

    //'admin/tmgmt/sources/entity_node',
    //'admin/tmgmt/sources/i18n_string_block',
    'admin/tmgmt/sources/i18n_string_field_instance',
    'admin/tmgmt/sources/i18n_string_field',
    'admin/tmgmt/sources/i18n_string_path_breadcrumbs',
    'admin/tmgmt/sources/i18n_string_menu',
  );

  $weights = array(
    'admin/tmgmt/sources/osha' => 1,
    'admin/tmgmt/sources/entity_node' => 2,
    'admin/tmgmt/sources/i18n_string_block' => 3,
    'admin/tmgmt/sources/locale_default' => 10,
    'admin/tmgmt/sources/i18n_string_menu_link' => 5,
    'admin/tmgmt/sources/entity_taxonomy_term' => 6,
  );

  if (isset($items['tabs']['1']['output']) && is_array($items['tabs']['1']['output'])) {
    foreach ($items['tabs']['1']['output'] as $index => &$tab) {
      if (isset($tab['#link']['path'])
        && array_key_exists($tab['#link']['path'], $weights)) {
        $tab['#weight'] = $weights[$tab['#link']['path']];
      }
      if (isset($tab['#link']['path'])
          && in_array($tab['#link']['path'], $disable)) {
        $tab['#link']['access'] = FALSE;
        unset($items['tabs']['1']['output'][$index]);
      }
      // Change name from Locale => Literals.
      if (isset($tab['#link']['path']) && $tab['#link']['path'] == 'admin/tmgmt/sources/locale_default') {
        $tab['#link']['title'] = t('Literals');
      }
    }
  }
}


/**
 * Access callback for the job entity (overrides tmgmg_job_access).
 *
 * @param string $op
 *   The operation being performed.
 * @param object $job
 *   (Optional) A TMGMTJob entity to check access for. If no entity is given, it
 *   will be determined whether access is allowed for all entities.
 * @param object $account
 *   (Optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return bool
 *   TRUE if access is allowed, FALSE otherwise.
 */
function osha_tmgmt_job_access($op, $job = NULL, $account = NULL) {
  if ($op == 'view') {
    return user_access('view translation job', $account);
  }
  return tmgmt_job_access($op, $job, $account);
}

/**
 * Implements hook_node_access().
 *
 * Checks if node is in an active job and denies edit for the node. admin still
 * can edit the node anyway at is own risk.
 *
 * {@inheritdoc}
 */
function osha_tmgmt_node_access($node, $operation, $user) {
  if ($operation == 'update') {
    if ($user->uid != 1) {
      $query = db_select('tmgmt_job', 'tj');
      $query->join('tmgmt_job_item', 'tji', 'tj.tjid = tji.tjid');
      $query->fields('tj');
      $query->condition('tj.state', '1')
        ->condition('tji.plugin', 'entity')
        ->condition('tji.item_id', $node->nid);
      $count = $query->execute()->rowCount();
      if ($count > 0) {
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_views_api().
 */
function osha_tmgmt_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'osha_tmgmt') . '/views/',
  );
}


/**
 * Implements hook_views_default_views().
 */
function osha_tmgmt_views_default_views() {
  $views = array();
  $files = file_scan_directory(drupal_get_path('module', 'osha_tmgmt') . '/views', '/.view\.inc$/');
  foreach (array_keys($files) as $filepath) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

/**
 * Implements hook_preprocess_page().
 *
 * Hides tmgmt help in the OSHA content selection screen.
 */
function osha_tmgmt_preprocess_page(&$variables) {
  if ($_GET['q'] == 'admin/tmgmt/sources'
      || $_GET['q'] == 'admin/tmgmt/sources/osha') {
    if (isset($variables['page']['help']['system_help']['#markup'])) {
      $variables['page']['help']['system_help']['#markup'] = '';
    };
  }
}

/**
 * Implements hook_node_presave().
 *
 * Pre-calculate field_character_count and field_page_count before saving.
 */
function osha_tmgmt_node_presave($node) {
  if (isset($node->field_character_count)) {
    OshaTMGMTStatistics::computeEntityStatistics($node, 'node');
    $node->field_character_count[LANGUAGE_NONE][0]['value'] = $node->character_count;
    if (isset($node->field_page_count)) {
      $node->field_page_count[LANGUAGE_NONE][0]['value'] = $node->page_count;
    }
  }
}

/**
 * Show job priority as translatable string.
 *
 * @param object $job
 *   Job
 *
 * @return string
 *   Job priority in current language
 */
function osha_tmgmt_job_priority_name($job) {
  if (isset($job->priority)) {
    switch ($job->priority) {
      case OSHA_TMGMT_JOB_PRIORITY_HIGH:
        return t('High');

      case OSHA_TMGMT_JOB_PRIORITY_LOW:
        return t('Low');

      default:
        return t('Normal');
    }
  }
  return '';
}

/**
 * Implements hook_form_alter().
 */
function osha_tmgmt_form_alter(&$form, &$form_state, $form_id) {
  // Checks if the form is a source item form, and generates it's supposed id.
  $form_source_id = '';
  if (isset($form_state['plugin']) && isset($form_state['item_type'])) {
    $form_source_id = 'tmgmt_ui_' . $form_state['plugin'] . '_source_' . $form_state['item_type'] . '_overview_form';
  }

  switch ($form_id) {
    case $form_source_id:
      if (isset($form['actions']['submit'])) {
        unset($form['actions']['submit']);
      }
      break;

    case 'entity_collection_content_add_form':
      if ($collection = $form_state['entity_collection']) {
        if ($collection->bundle == 'translators_group') {
          $options = osha_workflow_users_get_users_from_role_as_options(OSHA_WORKFLOW_ROLE_CONTENT_VALIDATOR);
          $users = array();
          foreach ($options as $uid => $account) {
            $users['user:' . $uid] = $account;
          }
          $form['add_content']['#title'] = t('Add validator');
          $form['add_content']['entity_type']['#access'] = FALSE;
          $form['add_content']['content_select'] = array(
            '#type' => 'select',
            '#options' => $users,
            '#description' => t('Select the person account from the list then press <b>Add content</b>'),
          );
        }
      }
      break;

    case 'entity_collection_content_form':
      if ($collection = $form_state['entity_collection']) {
        if ($collection->bundle == 'translators_group' && !empty($form['content'])) {
          foreach ($form['content'] as &$row) {
            hide($row['style']);
          }
        }
      }
      break;

    case 'tmgmt_ui_cart_content':
      $languages = tmgmt_available_languages();
      $options = array();
      $job_char_count = 0;
      $job_page_count = 0;
      $items = tmgmt_ui_cart_get()->getJobItemsFromCart();
      if (empty($items)) {
        drupal_set_message('Your cart is empty', 'warning');
        hide($form);
        break;
      }
      foreach ($items as $item) {
        OshaTMGMTStatistics::computeJobItemStatistics($item);
        $job_char_count += $item->character_count;
        $job_page_count += $item->page_count;
        $uri = $item->getSourceUri();
        $options[$item->tjiid] = array(
          $item->getSourceType(),
          (!empty($uri['path']) ? l($item->label(), $uri['path']) : $item->label()),
          round($item->page_count, 2),
          $item->character_count,
          isset($languages[$item->getSourceLangCode()]) ? $languages[$item->getSourceLangCode()] : t('Unknown'),
        );
      }

      #increase the size of the language select list
      $form['target_language']['#size'] = count($languages);
      $form['items'] = array(
        '#type' => 'tableselect',
        '#header' => array(
          t('Type'),
          t('Content'),
          t('Page Count') . "( " . round($job_page_count, 2) . " )",
          t('Character Count') . "( " . $job_char_count . " )",
          t('Language'),
        ),
        '#empty' => t('There are no items in your cart.'),
        '#options' => $options,
      );

      #add JS file
      $form['#attached']['js'][] = drupal_get_path('module', 'osha_tmgmt') . '/js/osha_tmgmt.js';

      #select all languages
      $form['select_all_lng'] = array(
          '#type' => 'checkbox',
          '#title' => t('Select all languages'),
      );

      #select some languages
      $form['select_some_lng'] = array(
          '#type' => 'checkbox',
          '#title' => t('Select EU-OSHA default languages (24)'),
      );

      #order form elements
      $form['tmgmt-ui-cart-content']['#weight'] = 0;
      $form['priority']['#weight'] = 1;
      $form['target_language']['#weight'] = 2;
      $form['select_all_lng']['#weight'] = 3;
      $form['select_some_lng']['#weight'] = 3;
      $form['empty_cart']['#weight']['#weight'] = 4;
      $form['remove_selected']['#weight']['#weight'] = 4;
      $form['request_translation']['#weight']['#weight'] = 4;

      $form['request_translation']['#submit'] = array('osha_tmgmt_tmgmt_ui_cart_content_submit');
      $form['priority'] = array(
        '#title' => t('Job priority'),
        '#type' => 'select',
        '#options' => array(0 => 'Normal', 2 => 'High', 1 => 'Low'),
        '#weight' => 0,
      );
      break;

    case 'tmgmt_job_form':
      if (!user_access('accept translation jobs')) {
        // Make the form read-only
        // @todo:urgent:possible security issue - upload XML as translator liaison
        $form['translator_wrapper']['#access'] = FALSE;
        $form['info']['label']['#disabled'] = TRUE;
        $form['actions']['submit']['#access'] = FALSE;
        $form['actions']['cancel']['#title'] = t('Back');
      }
      $languages = tmgmt_available_languages();
      $job = $form_state['tmgmt_job'];

      $target_languages_codes = OshaTMGMTStatistics::getJobTargetLanguages($job);
      $target_languages = array();
      foreach ($target_languages_codes as $lang_code) {
        $target_languages[$lang_code] = $languages[$lang_code];
      }
      $wrapper = entity_metadata_wrapper('tmgmt_job', $job);
      drupal_set_title(t('@title - @state', array(
        '@title' => $job->label(),
        '@state' => $wrapper->state->label(),
      )));

      $form['language_info'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('tmgmt-ui-job-info', 'clearfix')),
        '#weight' => 1,
      );

      $form['language_info']['target_languages'] = array(
        '#title' => t('Target languages') . ' (' . count($target_languages_codes) . ')',
        '#type' => 'checkboxes',
        '#default_value' => $target_languages,
        '#options' => drupal_map_assoc($target_languages),
        '#disabled' => TRUE,
        '#weight' => 1,
        '#attributes' => array('class' => array('container-inline')),
      );

      $form['language_info']['target_languages_not'] = array(
        '#type' => 'checkboxes',
        '#options' => drupal_map_assoc(array_diff($languages, $target_languages)),
        '#disabled' => TRUE,
        '#weight' => 2,
        '#attributes' => array('class' => array('container-inline')),
      );

      $form['info']['total_character_count'] = array(
        '#title' => t('Total character count'),
        '#type'  => 'item',
        '#markup' => $job->character_count,
        '#prefix' => '<div id="tmgmt-ui-character-count" class="tmgmt-ui-character-count tmgmt-ui-info-item">',
        '#suffix' => '</div>',
      );

      $form['info']['priority'] = array(
        '#attributes' => array('class' => array('container-inline')),
        '#type' => 'item',
        '#title' => t('Priority'),
        '#markup' => osha_tmgmt_job_priority_name($job),
      );

      $form['info']['page_count'] = array(
        '#title' => t('Page count'),
        '#type'  => 'item',
        '#markup' => $job->page_count,
        '#prefix' => '<div id="tmgmt-ui-page-count" class="tmgmt-ui-page-count tmgmt-ui-info-item">',
        '#suffix' => '</div>',
      );

      hide($form['info']['word_count']);
      hide($form['info']['source_language']);
      hide($form['info']['target_language']);
      hide($form['info']['translator']);
      if ($form_state['tmgmt_job']->state == TMGMT_JOB_STATE_UNPROCESSED) {
        hide($form['translator_wrapper']);
        if (isset($form['job_items_wrapper']['suggestions'])) {
          hide($form['job_items_wrapper']['suggestions']);
        }
      }
      if (isset($form['info']['created'])) {
        $created = $form['info']['created'];
        unset($form['info']['created']);
        $form['info']['created'] = $created;
      }
      break;

    case 'views_form_tmgmt_node_selection_view_tmgmt_node_selection_view_page':
      if ($form['#id'] == 'views-form-tmgmt-node-selection-view-tmgmt-node-selection-view-page') {
        if (isset($form['select']['rules_component::tmgmt_node_ui_tmgmt_nodes_add_items_to_cart'])) {
          /* Hijack submit button to call our own method to add items to cart - with integrity check */
          $form['select']['rules_component::tmgmt_node_ui_tmgmt_nodes_add_items_to_cart']['#submit'] = array(
            'osha_tmgmt_node_ui_tmgmt_nodes_add_items_to_cart',
          );
        }
      }
      break;

    case 'tmgmt_ui_entity_translation_review_form':
      if (isset($form_state['item']) && $form_state['item']->item_type == 'node'
          && user_access('preview layout validation')) {
        $form['preview'] = array(
          '#theme' => 'link',
          '#text' => 'Preview layout',
          '#path' => sprintf('node/%s/layout-validation/%s', $form_state['item']->item_id, $form_state['item']->tjiid),
          '#weight' => -10,
          '#options' => array(
            'attributes' => array('target' => '_blank'),
            'html' => FALSE,
          ),
        );
      }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_tmgmt_form_tmgmt_entity_ui_translate_form_alter(&$form, &$form_state, $form_id) {
  list($id, $vid, $bundle) = entity_extract_ids($form_state['entity_type'], $form_state['entity']);
  $entity_language = entity_language($form_state['entity_type'], $form_state['entity']);
  $items = osha_tmgmt_job_item_load_latest('entity', $form_state['entity_type'], $id, $entity_language);

  $pt_col_index = 4;

  // Remove all previously disabled checkboxes - we override that.
  $languages = language_list();

  foreach (array_keys($languages) as $langcode) {
    // Reset the pending column and ordering, rebuild based on job item.
    unset($form['languages'][$langcode]);
    $form['languages']['#options'][$langcode][$pt_col_index] = t('None');

    if (isset($items[$langcode])) {
      $item = $items[$langcode];
      $uri = $item->uri();
      $additional = l(osha_tmgmt_get_job_item_state_label($item->state), $uri['path'], array('query' => array('destination' => current_path())));
      $form['languages']['#options'][$langcode][$pt_col_index] = $additional;
    }
  }

  // Hide button Add to cart if node not in published or ready to published.
  if ($form_state['entity_type'] == 'node'
    && !empty($form_state['entity']->workbench_moderation)) {
    $add_to_cart_states = array(OSHA_WORKFLOW_STATE_PUBLISHED, OSHA_WORKFLOW_STATE_READY_TO_PUBLISH);
    $current_state = $form_state['entity']->workbench_moderation['current']->state;
    if (!in_array($current_state, $add_to_cart_states)) {
      hide($form['top_actions']['add_to_cart']);
    }
  }

  // Change from table select to table.
  $form['languages']['#type'] = 'table';
  $form['languages']['#theme'] = 'table';
  $form['languages']['#rows'] = $form['languages']['#options'];
  hide($form['actions']);

  // Translation Content Validators Group Assign Form.
  if (!empty($items)) {
    $form['translation_validators'] = array(
      '#type' => 'fieldset',
      '#title' => 'Translation Validators',
      '#collapsible' => TRUE,
      '#tree' => TRUE,
      '#weight' => -1,
    );
    reset($items);
    $tjid = current($items)->tjid;
    $form['translation_validators']['existing_group'] = array(
      '#type' => 'markup',
      '#markup' => t('No group of Translation Validators is not set.'),
    );
    $group_id = current($items)->eid;
    $group = array();
    if (!empty($group_id)) {
      $group = osha_tmgmt_get_job_translation_validators_group($group_id);
      $form['translation_validators']['existing_group']['#markup']
        = t('<b>@name</b> is assigned for this node. If you assign another group, it will override the current reviews.',
        array('@name' => $group->name));
    }

    $form['translation_validators']['translation_group'] = array(
      '#type' => 'select',
      '#title' => 'Translation group',
      '#options' => osha_tmgmt_get_translators_groups_as_options(),
    );
    $form['translation_validators']['submit'] = array(
      '#type' => 'submit',
      '#submit' => array('osha_tmgmt_translation_validators_submit'),
      '#validate' => array(),
      '#value' => 'Apply',
    );

    $form_state['validators_group'] = $group;
    $form_state['tmgmt_job'] = tmgmt_job_load($tjid);
    $form_state['tmgmt_job_items'] = $items;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_tmgmt_form_tmgmt_ui_entity_translation_review_form_alter(&$form, &$form_state) {
  $job_item = $form_state['item'];
  global $user;

  $user_can_edit = osha_tmgmt_user_can_edit_job_item($job_item);

  $fields = element_children($form['review']);
  foreach ($fields as $field) {
    $values = element_children($form['review'][$field]);
    foreach ($values as $value) {
      $form['review'][$field][$value]['actions']['#access'] = $user_can_edit;
      $form['review'][$field][$value]['translation']['#disabled'] = !$user_can_edit;
    }
  }
  // Fix State Label.
  $form['info']['state']['#markup'] = osha_tmgmt_get_job_item_state_label($job_item->state);

  // Rename button Cancel.
  $form['actions']['cancel']['#title'] = t('Back to Job');

  // Set actions and access levels.
  if (!empty($form['actions']['save'])) {
    $form['actions']['save']['#access'] = FALSE;
  }
  if (!empty($form['actions']['accept']['#access'])) {
    $form['actions']['accept']['#access'] = user_access('accept job item translation');
  }


  if ($user_can_edit) {
    // Show buttons if job item in not ready.
    $form['actions']['ready_to_publish'] = array(
      '#type' => 'submit',
      '#value' => t('Ready to Publish'),
      '#submit' => array('osha_tmgmt_ready_to_publish_submit'),
      '#validate' => array('osha_tmgmt_ready_to_publish_validate'),
      '#access' => user_access('set job item to ready to publish state'),
    );
    $form['actions']['reject'] = array(
      '#type' => 'submit',
      '#submit' => array('osha_tmgmt_job_item_translation_reject'),
      '#validate' => array(),
      '#value' => 'Reject Translation',
      '#access' => user_access('abort job item'),
    );
    $form['action_message'] = array(
      '#type' => 'textarea',
      '#title' => 'Message',
      '#weight' => 51,
      '#description' => t('You can enter a message before making an action
        to keep it in logs.'),
    );

    // Alter form on different states.
    switch ($job_item->state) {
      case OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired:
        $validators = osha_tmgmt_load_validators_by_job_item($job_item);
        if (array_key_exists($user->uid, $validators)
          && $validators[$user->uid]->next == 1) {
          // Add validators actions.
          $form['actions']['cvalidator_approve'] = array(
            '#type' => 'submit',
            '#submit' => array('osha_tmgmt_translation_validators_accept'),
            '#validate' => array(),
            '#value' => 'Approve',
          );
          $last = osha_tmgmt_load_validators_last($validators);
          $can_reject = ($last->uid == $user->uid);
          $form['actions']['reject']['#access'] = $can_reject;
        }
        break;

      case TMGMT_JOB_ITEM_STATE_ACTIVE:
        $form['actions']['accept_layout'] = array(
          '#type' => 'submit',
          '#value' => t('Approve layout'),
          '#submit' => array('osha_tmgmt_layout_validator_approve_submit'),
          '#validate' => array(),
          '#access' => user_access('set job item to translated state'),
        );
        break;

      case TMGMT_JOB_ITEM_STATE_REVIEW:
        $form['actions']['require_content_validation'] = array(
          '#type' => 'submit',
          '#value' => t('Require Content Validation'),
          '#submit' => array('osha_tmgmt_require_content_validation_submit'),
          '#validate' => array('osha_tmgmt_require_content_validation_validate'),
          '#access' => user_access('set job item to require content validation state'),
        );
        break;
    }
  }
}

function osha_tmgmt_form_tmgmt_job_form_alter(&$form, &$form_state, $form_id) {

  $form['job_items_wrapper']['#attributes'] = array('class' => array('container-inline'));
  $form_state['filter_target_language'] = '';
  $form['job_items_wrapper']['filter_target_language'] = array(
    '#type' => 'select',
    '#title' => t('Target language'),
    '#title_display' => 'before',
    '#weight' => -4,
    '#options' => array(
      '' => t('-- Any --'),
    ),
  );

  $form_state['filter_activity'] = '';
  $form['job_items_wrapper']['filter_activity'] = array(
    '#type' => 'select',
    '#title' => t('Activity'),
    '#title_display' => 'before',
    '#weight' => -3,
    '#options' => array(
      '' => t('-- Any --'),
    ),
  );

  $form_state['filter_state'] = '';
  $form['job_items_wrapper']['filter_state'] = array(
    '#type' => 'select',
    '#title' => t('Translation status'),
    '#title_display' => 'before',
    '#weight' => -2,
    '#options' => array(
      TMGMT_JOB_ITEM_STATE_ACTIVE => t('On translation'),
      OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired => t('Validation required'),
      OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidated => t('Validated'),
      OSHA_TMGMT_JOB_ITEM_STATE_TranslatedReadyToPublish => t('Translated'),
    ),
  );

  $form['job_items_wrapper']['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#submit' => array('osha_tmgmt_tmgmt_job_form_filter_submit'),
    '#weight' => -1,
  );
}

function osha_tmgmt_tmgmt_job_form_filter_submit(&$form, &$form_state) {
  drupal_set_message('Why would you do that for?', 'warning');
}

function osha_tmgmt_get_job_item_states() {
  return array(
    TMGMT_JOB_ITEM_STATE_ACTIVE => t('On Translation'),
    TMGMT_JOB_ITEM_STATE_REVIEW => t('Translated'),
    TMGMT_JOB_ITEM_STATE_ACCEPTED => t('Published'),
    TMGMT_JOB_ITEM_STATE_ABORTED => t('Rejected'),
    OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired => t('Needs Content Validation'),
    OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidated => t('Content Validated'),
    OSHA_TMGMT_JOB_ITEM_STATE_TranslatedReadyToPublish => t('Translation Ready to Publish'),
  );
}
/**
 * Returns osha state label of a job item state.
 */
function osha_tmgmt_get_job_item_state_label($state) {
  $states = osha_tmgmt_get_job_item_states();
  return $states[$state];
}

/*
 * Overrides views_bulk_operations action that add items to cart.
 * This methods checks and reports duplicate items that are already in the cart.
 *
 * @param $form
 * @param $form_state
 */
function osha_tmgmt_node_ui_tmgmt_nodes_add_items_to_cart($form, &$form_state) {
  $vbo = _views_bulk_operations_get_field($form_state['build_info']['args'][0]);
  $source_items = _views_bulk_operations_get_selection($vbo, $form_state);
  $existing = array();
  $cart = tmgmt_ui_cart_get();
  foreach ($cart->getJobItemsFromCart() as $item) {
    if ($item->plugin == 'entity' && $item->item_type == 'node') {
      $existing[] = $item->item_id;
    }
  }
  $i = 0;
  foreach ($source_items as $source_id) {
    if (!in_array($source_id, $existing)) {
      if (tmgmt_ui_cart_get()->addJobItem('entity', 'node', $source_id)) {
        $i++;
      }
    }
    else {
      $node = node_load($source_id);
      drupal_set_message("<a href='node/{$source_id}'><strong>{$node->title}</strong></a> is already in the cart");
    }
  }
  drupal_set_message(format_plural($i, '@count content source was added into the <a href="@url">cart</a>.',
    '@count content sources were added into the <a href="@url">cart</a>.', array('@url' => url('admin/tmgmt/cart'))));
}

/**
 * Overrides form submit for tmgmt cart checkout.
 */
function osha_tmgmt_tmgmt_ui_cart_content_submit($form, &$form_state) {
  global $user;
  $job_empty = TRUE;
  $values = $form_state['values'];
  $target_languages = array_filter($values['target_language']);
  if (empty($target_languages)) {
    drupal_set_message(t('No target language selected'), 'error');
    return;
  }
  $job_it_by_src_lang = array();
  // Group the selected items by source language.
  foreach (tmgmt_job_item_load_multiple(array_filter($form_state['values']['items'])) as $job_item) {
    $job_it_by_src_lang[$job_item->getSourceLangCode()][$job_item->tjiid] = $job_item;
  }
  $job = tmgmt_job_create(
    OSHA_TMGMT_DEFAULT_SOURCE_LANGUAGE,
    OSHA_TMGMT_DEFAULT_TARGET_LANGUAGE,
    $user->uid
  );
  $remove_job_item_ids = array();
  // Loop over all target languages, create a job for each source and target
  // language combination add add the relevant job items to it.
  foreach ($target_languages as $target_language) {
    $job_empty = TRUE;
    foreach ($job_it_by_src_lang as $source_language => $job_items) {
      // Skip in case the source language is the same as the target language.
      if ($source_language == $target_language) {
        continue;
      }
      /* @var TMGMTJobItem $job_item */
      foreach ($job_items as $id => $job_item) {
        try {
          // As the same item might be added to multiple jobs, we need to
          // re-create them and delete the old ones, after removing them from
          // the cart.
          $new_job_item = $job->addItem($job_item->plugin, $job_item->item_type, $job_item->item_id);
          $new_job_item->source_language = $source_language;
          $new_job_item->target_language = $target_language;
          // @TODO: Set plugin type entity on add to cart, not here (ugly).
          if ($new_job_item->plugin == 'node') {
            $new_job_item->plugin = 'entity';
          }
          OshaTMGMTStatistics::computeJobItemStatistics($new_job_item);
          $new_job_item->save();
          $remove_job_item_ids[$job_item->tjiid] = $job_item->tjiid;
          $job_empty = FALSE;
        }
        catch (Exception $e) {
          // If an item fails for one target language, then it is also going
          // to fail for others, so remove it from the array.
          unset($job_it_by_src_lang[$source_language][$id]);
          drupal_set_message($e->getMessage(), 'error');
        }
      }
    }
  }
  if (!$job_empty) {
    // Remove assigned job items from the cart.
    if ($remove_job_item_ids) {
      tmgmt_ui_cart_get()->removeJobItems($remove_job_item_ids);
      entity_delete_multiple('tmgmt_job_item', $remove_job_item_ids);
    }
    if ($job) {
      // Set the title to job #
      $job->label = t('Translation job #!tjid', array('!tjid' => $job->tjid));
      $job->priority = $values['priority'];
      OshaTMGMTStatistics::computeJobStatistics($job);
      $job->save();
      OshaWorkflowNotifications::notifyTranslationJobCreated($job);

      // This whole block replaces tmgmt_ui_job_checkout_and_redirect().
      $redirects = tmgmt_ui_job_checkout_multiple(array($job));
      if ($redirects) {
        if (isset($_GET['destination'])) {
          // Remove existing destination, as that will prevent us from being
          // redirect to the job checkout page. Set the destination as the final
          // redirect instead.
          tmgmt_ui_redirect_queue_set($redirects, $_GET['destination']);
          unset($_GET['destination']);
        }
        else {
          tmgmt_ui_redirect_queue_set($redirects, current_path());
        }
        $form_state['redirect'] = tmgmt_ui_redirect_queue_dequeue();

        // Count of the job messages is one less due to the final redirect.
        drupal_set_message(format_plural(count($redirects), t('One job needs to be checked out.'), t('@count jobs need to be checked out.')));
      }
    }
  }
  else {
    //TODO: Delete the job ...?
  }
}


/**
 * Loads active job entities that have a job item with the identifiers.
 *
 * @param string $plugin
 *   The source plugin.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param string $source_language
 *   The source language of the item.
 *
 * @return array
 *   An array of job entities.
 */function osha_tmgmt_job_item_load_latest($plugin, $item_type, $item_id, $source_language) {
  $query = db_select('tmgmt_job_item', 'tji');
  $query->innerJoin('tmgmt_job', 'tj', 'tj.tjid = tji.tjid');
  $result = $query->condition('tj.source_language', $source_language)
    // Only query for jobs that are currently active.
    ->condition('tj.state', array(TMGMT_JOB_STATE_UNPROCESSED, TMGMT_JOB_STATE_ACTIVE))
    // And only query for job items that are not yet finished.
    ->condition('tji.state', TMGMT_JOB_ITEM_STATE_ACCEPTED, '<>')
    ->condition('tji.plugin', $plugin)
    ->condition('tji.item_type', $item_type)
    ->condition('tji.item_id', $item_id)
    ->fields('tji', array('tjiid'))
    ->fields('tj', array('target_language'))
    ->orderBy('tji.changed', 'DESC')
    ->groupBy('tji.tjiid')
    ->execute();
  if ($items = $result->fetchAllKeyed()) {
    $return = array();
    foreach (tmgmt_job_item_load_multiple(array_keys($items)) as $key => $item) {
      $return[$item->target_language] = $item;
    }
    return $return;
  }
  return FALSE;
}


/**
 * Implements hook_views_default_views_alter().
 */
function osha_tmgmt_views_default_views_alter(&$views) {
  if (isset($views['tmgmt_ui_job_items'])) {
    $handler = &$views['tmgmt_ui_job_items']->display['default']->handler;

    // Hide word count.
    unset($handler->display->display_options['fields']['word_count_1']);
    unset($handler->display->display_options['fields']['progress']);

    $handler->display->display_options['fields']['activity'] = array(
      'id' => 'activity',
      'table' => 'tmgmt_job_item',
      'field' => 'activity',
      'label' => t('Activity'),
      'element_label_colon' => FALSE,
    );

    /* Field: Translation Management Job Item: Source language */
    $handler->display->display_options['fields']['source_language']['id'] = 'source_language';
    $handler->display->display_options['fields']['source_language']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['source_language']['field'] = 'source_language';
    $handler->display->display_options['fields']['source_language']['label'] = t('Language');

    /* Field: Translation Management Job Item: Target language */
    $handler->display->display_options['fields']['target_language']['id'] = 'target_language';
    $handler->display->display_options['fields']['target_language']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['target_language']['field'] = 'target_language';

    /* Field: Translation Management Job Item: Page count */
    $handler->display->display_options['fields']['page_count']['id'] = 'page_count';
    $handler->display->display_options['fields']['page_count']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['page_count']['field'] = 'page_count';
    $handler->display->display_options['fields']['page_count']['label'] = t('Pages (1500 chars)');

    /* Field: Translation Management Job Item: Character count */
    $handler->display->display_options['fields']['character_count']['id'] = 'character_count';
    $handler->display->display_options['fields']['character_count']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['character_count']['field'] = 'character_count';

    /* Field: Translation Management Job Item: Plugin */
    $handler->display->display_options['fields']['plugin']['id'] = 'plugin';
    $handler->display->display_options['fields']['plugin']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['plugin']['field'] = 'plugin';
    $handler->display->display_options['fields']['plugin']['exclude'] = 1;

    /* Field: Translation Management Job Item: Item type */
    $handler->display->display_options['fields']['item_type']['id'] = 'item_type';
    $handler->display->display_options['fields']['item_type']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['item_type']['field'] = 'item_type';
    $handler->display->display_options['fields']['item_type']['exclude'] = 1;

    /* Field: Translation Management Job Item: Activity */
    $handler->display->display_options['fields']['activity']['id'] = 'activity';
    $handler->display->display_options['fields']['activity']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['activity']['field'] = 'activity';
    $handler->display->display_options['fields']['activity']['label'] = t('Activity');

    /* Field: Translation Management Job Item: Section */
    $handler->display->display_options['fields']['section']['id'] = 'section';
    $handler->display->display_options['fields']['section']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['section']['field'] = 'section';
    $handler->display->display_options['fields']['section']['label'] = t('Section');

    /* Field: Translation Management Job Item: Creator */
    $handler->display->display_options['fields']['creator']['id'] = 'creator';
    $handler->display->display_options['fields']['creator']['table'] = 'tmgmt_job_item';
    $handler->display->display_options['fields']['creator']['field'] = 'creator';
    $handler->display->display_options['fields']['creator']['label'] = t('Creator');

    /* Rename some of the labels*/
    $handler->display->display_options['fields']['type']['label'] = t('Content type');
    $handler->display->display_options['fields']['state']['label'] = t('Status');
    $handler->display->display_options['fields']['changed']['label'] = t('Modified date');

    // Reorder view fields.
    $columns = array(
      'type', 'section', 'activity', 'progress', 'state',
      'changed', 'creator', 'operations',
    );
    foreach ($columns as $column) {
      if (isset($handler->display->display_options['fields'][$column])) {
        $settings = $handler->display->display_options['fields'][$column];
        unset($handler->display->display_options['fields'][$column]);
        $handler->display->display_options['fields'][$column] = $settings;
      }
    }
  }

  if (isset($views['tmgmt_ui_job_overview'])) {
    $handler = &$views['tmgmt_ui_job_overview']->display['default']->handler;

    // Remove un-needed filters.
    unset($handler->display->display_options['filters']['source_language']);
    unset($handler->display->display_options['filters']['target_language']);
    unset($handler->display->display_options['filters']['translator']);

    // Remove un-needed columns.
    unset($handler->display->display_options['fields']['source_language']);
    unset($handler->display->display_options['fields']['target_language']);
    unset($handler->display->display_options['fields']['translator']);
    unset($handler->display->display_options['fields']['word_count']);

    /* Field: Translation Management Job: Priority */
    $handler->display->display_options['fields']['priority']['id'] = 'priority';
    $handler->display->display_options['fields']['priority']['table'] = 'tmgmt_job';
    $handler->display->display_options['fields']['priority']['field'] = 'priority';

    /* Field: Translation Management Job: Page count */
    $handler->display->display_options['fields']['page_count']['id'] = 'page_count';
    $handler->display->display_options['fields']['page_count']['table'] = 'tmgmt_job';
    $handler->display->display_options['fields']['page_count']['field'] = 'page_count';

    /* Field: Translation Management Job: Character count */
    $handler->display->display_options['fields']['character_count']['id'] = 'character_count';
    $handler->display->display_options['fields']['character_count']['table'] = 'tmgmt_job';
    $handler->display->display_options['fields']['character_count']['field'] = 'character_count';

    // Reorder view fields.
    foreach (array('progress', 'changed', 'operations') as $column) {
      if (isset($handler->display->display_options['fields'][$column])) {
        $settings = $handler->display->display_options['fields'][$column];
        unset($handler->display->display_options['fields'][$column]);
        $handler->display->display_options['fields'][$column] = $settings;
      }
    }
  }
}

/**
 * Implements hook_mail().
 *
 * {@inheritdoc}
 */
function osha_tmgmt_mail($key, &$message, $params) {
  if ($key == 'notifyNodeIsReadyToPublish') {
    $subject = variable_get('osha_mail_template_approval_subject', '[OSHA Website] CMW: ([node:nid]) [node:title-field]');
    $body = variable_get('osha_mail_template_approval_body',
      'Dear [user:name],
      There was new content published/ready to publish that can be translated [node:url].

      Thank you,'
    );
  }
  elseif (isset($params['tmgmt_job_item'])) {
    $subject = variable_get('osha_mail_template_translation_job_item_subject', '[OSHA Website] CMW: [tmgmt_job_item:tjid:label]');
    $body = variable_get('osha_mail_template_translation_job_item_body',
      'Dear [user:name],
      You have a translation task that needs your attention <a href="[tmgmt_job_item:url]">[tmgmt_job_item:tjid:label]</a>.

      Thank you,'
    );
  }
  else {
    $subject = variable_get('osha_mail_template_translation_subject', '[OSHA Website] CMW: [tmgmt_job:label]');
    $body = variable_get('osha_mail_template_translation_body',
      'Dear [user:name],
      You have a translation task that needs your attention <a href="[site:url]/admin/tmgmt/jobs/[tmgmt_job:tjid]">[tmgmt_job:label]</a>.

      Thank you,'
    );
  }
  $message['subject'] = token_replace($subject, $params);
  $message['body'] = token_replace($body, $params);
}


class OshaTMGMTStatistics {

  /**
   * Compute statistics such as character/page count for a job item.
   *
   * @param TMGMTJobItem $job_item
   *   Attach statistical information to the job item
   */
  public static function computeJobItemStatistics(&$job_item) {
    $job_item->character_count = 0;
    $job_item->page_count = 0;

    if ($job_item->item_type == "node" || $job_item->item_type == "taxonomy_term") {
      $entity = entity_load_single($job_item->item_type, $job_item->item_id);
      if (!$entity) {
        throw new TMGMTException(t('Unable to load entity %type with id %id', array('%type' => $job_item->item_type, $job_item->item_id)));
      }
      self::computeEntityStatistics($entity, $job_item->item_type);
    }
    else {
      $data = $job_item->getSourceData();
      self::count($data, $ret);
      $job_item->character_count = $ret;
      if ($job_item->character_count > 0) {
        $cpp = variable_get('osha_tmgmt_characters_per_page', 1500);
        $job_item->page_count = $job_item->character_count / $cpp;
      }
    }
  }

  /**
   * Compute characters/page count for node/taxonomy_term entity types.
   *
   * @param object $node
   *   Object to compute data for. Will return with fields character_count and
   *   page_count set.
   * @param string $entity_type
   *   Type of entity, e.g. 'node', 'taxonomy_term'
   */
  public static function computeEntityStatistics(&$node, $entity_type) {
    $node->character_count = 0;
    $node->page_count = 0;

    $language = entity_language($entity_type, $node);
    $data = tmgmt_field_get_source_data($entity_type, $node, $language, TRUE);
    self::count($data, $ret);
    $node->character_count = $ret;
    if ($node->character_count > 0) {
      $cpp = variable_get('osha_tmgmt_characters_per_page', 1500);
      $node->page_count = $node->character_count / $cpp;
    }
  }

  /**
   * Compute statistics such as character/page count for a job.
   *
   * @param TMGMTJob $job
   *   Attach statistical information to the job
   */
  public static function computeJobStatistics(&$job) {
    $job->character_count = 0;
    $job->page_count = 0;
    $items = $job->getItems();
    /* @var TMGMTJobItem $item */
    foreach ($items as $item) {
      if ($item->character_count == 0) {
        self::computeJobItemStatistics($item);
      }
    }
    foreach (self::getUniqueItems($job) as $item_type => $items) {
      foreach ($items as $item) {
        if ($item->character_count > 0) {
          $job->character_count += $item->character_count;
        }
      }
    }
    if ($job->character_count > 0) {
      $cpp = variable_get('osha_tmgmt_characters_per_page', 1500);
      $job->page_count = $job->character_count / $cpp;
    }
  }

  /**
   * Recursively count the length of inner #text keys of this data array.
   *
   * The HTML tags are ignored.
   * The Whitespaces/tabs/newlines are ignored.
   * The &nbsp; are ignored.
   *
   * @param TMGMTJobItem $item
   *   Job item
   * @param int $count
   *   Number of characters from all structures (ie. fields)
   */
  protected static function count($item, &$count) {
    if (!empty($item['#text'])) {
      if (_tmgmt_filter_data($item)) {
        $count += strlen(str_replace("&nbsp;", "", preg_replace("/\s+/", "", strip_tags($item['#text']))));
      }
    }
    elseif (is_array($item)) {
      foreach (element_children($item) as $key) {
        if (is_string($key) && $key == "node_title") {
          continue;
        }
        self::count($item[$key], $count);
      }
    }
  }

  /**
   * Generates an unique array of items, based on item_type and item_id.
   *
   * @param object $job
   *   The job with the items
   *
   * @return array
   *   Items -> Items[item_type][item_id] contains an item
   */
  public static function getUniqueItems($job) {
    $job_items = array();
    foreach ($job->getItems() as $item) {
      if (!isset($job_items[$item->item_type][$item->item_id])) {
        $item->target_languages = array();
        $item->target_languages[] = $item->target_language;

        $job_items[$item->item_type][$item->item_id] = $item;
      }
      else {
        $job_items[$item->item_type][$item->item_id]->target_languages[] = $item->target_language;
      }
    }
    return $job_items;
  }

  /**
   * Returns the job target languages.
   *
   * @param TMGMTJob $job
   *   The job.
   *
   * @return array
   *   Array of language codes
   */
  public static function getJobTargetLanguages(TMGMTJob $job) {
    $target_languages = array();
    foreach ($job->getItems() as $item) {
      $target_languages[] = $item->target_language;
    }

    return array_unique($target_languages);
  }
}
