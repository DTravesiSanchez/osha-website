<?php
/**
 * @file
 * Code for the Publication feature.
 */

include_once 'osha_publication.features.inc';

define('OSHA_PUBLICATION_CONTENT_TYPE_PUBLICATION', 'publication');
define('SOLR_SEARCH_INDEX', 'default_multilingual_node_index');
define('OSHA_PDF_DOWN_PATH', 'public://pdf_download');
if (!defined('PCLZIP_TEMPORARY_DIR')) {
  define('PCLZIP_TEMPORARY_DIR', variable_get('file_temporary_path', '/tmp') . '/');
}

function osha_publication_t($title) {
  return t($title);
}

/**
 * Implements hook_menu().
 */
function osha_publication_menu() {
  $items = array();
  $items['tools-and-publications/publications'] = array(
    'title' => 'Publications',
    'title callback' => 'osha_publication_t',
    'description' => 'Config information for the module',
    'page callback' => 'osha_publication_listing_page',
    'access arguments' => array('access content'),
  );
  $items['export/tools-and-publications/publications'] = array(
    'title' => 'Publications',
    'description' => 'Export publications filtered by tags',
    'page callback' => 'osha_publication_export',
    'access arguments' => array('access content'),
    'delivery callback' => 'drupal_json_output',
  );
  $items['node/%node/download_pdf'] = array(
    'page callback' => 'osha_publication_download_pdf',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements Elysia hook_cronapi().
 */
function osha_publication_cronapi() {
  return array('osha_publication_cron' => array(
    'description' => 'Publicatio  pdf pages count update',
    'rule' => '*/15 * * * *', // Every 15 minutes
  ));
}

function osha_publication_cron() {
  $result = views_get_view_result('publication_pages_count');
  $diff = variable_get('node_changed_diff', 0);
  foreach ($result as $row) {
    $changed = date('Y-m-d H:i:s', $row->node_changed + $diff);
    if ($changed > $row->field_field_pages_count_updated[0]['raw']['value']) {
      $uri = $row->field_field_file[0]['raw']['uri'];
      $path = drupal_realpath($uri);
      $pages_count = pdf_to_image_count_pages($path);
      $node = node_load($row->nid);
      $node->field_pages_count[LANGUAGE_NONE][0]['value'] = $pages_count;
      $node->field_pages_count_updated[LANGUAGE_NONE][0]['timezone'] = 'Europe/Madrid';
      $node->field_pages_count_updated[LANGUAGE_NONE][0]['timezone_db'] = 'Europe/Madrid';
      $node->field_pages_count_updated[LANGUAGE_NONE][0]['date_type'] = 'datetime';
      $node->field_pages_count_updated[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s');
      node_save($node);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function osha_publication_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'publication_node_form') {
    $form['field_publication_bookshop_id']['#access'] = FALSE;
    $form['field_pages_count']['#access'] = FALSE;
    $form['field_pages_count_updated']['#access'] = FALSE;
  }
}

function osha_publication_listing_page() {
  return '';
}

function osha_publication_export() {
  module_load_include('inc', 'osha_publication', 'osha_publication.pages');
  $publications = array();
  /** @var SelectQuery $q */
  $q = db_select('node', 'n')
    ->fields('n', ['nid', 'vid'])
    ->condition('n.type', 'publication')
    ->condition('n.status', '1');
  $q->innerJoin('field_data_field_publication_date', 'fp', 'fp.entity_id = n.nid AND fp.revision_id = n.vid');
  $q->where('fp.field_publication_date_value <= NOW()');
  $q->orderBy('fp.field_publication_date_value', 'DESC');
  if (!empty($tags = $_GET['tags'])) {
    $tags_ids = array();
    if (!empty($tags)) {
      foreach ($tags as $tag) {
        if (is_int($tag)) {
          $tags_ids[] = $tag;
        }
        else {
          $tid = _osha_publication_get_tag_by_code($tag);
          if (!empty($tid)) {
            $tags_ids[] = $tid;
          }
        }
      }
    }
    $q->innerJoin('field_data_field_tags', 't', 't.entity_id = n.nid');
    $q->condition('t.field_tags_tid', $tags_ids, 'IN');
  }
  if (!empty($_GET['limit'])) {
    $q->range(0, intval($_GET['limit']));
  }
  $nids = $q->execute()->fetchAllKeyed();

  if (!empty($nids)) {
    $q = db_select('field_data_title_field', 'tf')
      ->fields('tf', ['entity_id', 'language', 'title_field_value'])
      ->condition('tf.entity_id', array_keys($nids), 'IN')
      ->condition('tf.revision_id', $nids, 'IN');
    $data = $q->execute()->fetchAll();
    foreach ($data as $item) {
      if (empty($publications[$item->entity_id])) {
        $publications[$item->entity_id] = array(
          'nid' => $item->entity_id,
          'title' => array(),
          'path_alias' => drupal_get_path_alias('node/' . $item->entity_id),
        );
      }
      $publications[$item->entity_id]['title'][$item->language] = $item->title_field_value;
    }
  }
  return $publications;
}

/**
 * Implements hook_url_inbound_alter().
 */
function osha_publication_url_inbound_alter(&$path, $original_path, $path_language) {
  global $language_url;
  $args = arg();
  // MC-175 - publication search pretty path.
  // break down in filters the publication search path.
  if (strpos($path, 'tools-and-publications/publications') !== FALSE) {
    $menu_item = menu_get_item($path);
    if (in_array($menu_item['page_callback'], ['osha_publication_listing_page', 'osha_publication_export'])) {
      if ($menu_item['page_callback'] == 'osha_publication_listing_page') {
        $path = 'tools-and-publications/publications';
      }
      elseif ($menu_item['page_callback'] == 'osha_publication_export') {
        $path = 'export/tools-and-publications/publications';
      }
      if (count($args) > 2) {
        $search_args = $args;
        array_shift($search_args);
        array_shift($search_args);
        foreach ($search_args as $search_filter) {
          if (strpos($search_filter, 'l_') === 0) {
            $lang_filter = explode('_', $search_filter);
            array_shift($lang_filter);
            $_GET['languages'] = drupal_map_assoc($lang_filter);
          }
          elseif (strpos($search_filter, 'tags-') === 0) {
            $tags_filter = explode('-', $search_filter);
            array_shift($tags_filter);
            $_GET['tags'] = drupal_map_assoc($tags_filter);
          }
          elseif (strpos($search_filter, 'type_') === 0) {
            $type_filter = explode('_', $search_filter);
            array_shift($type_filter);
            $_GET['publication_type'] = drupal_map_assoc($type_filter);
          }
        }
      }
    }
  }


  // For publications, the default url should serve the file.
  // if the path ends with /view than should serve the node.
  // See CW-1072.
  $orig_path_alias = drupal_lookup_path('alias', $original_path);
  $orig_path_source = drupal_lookup_path('source', $original_path);

  if (end($args) == 'view') {
    // If path exists, don't do anything.
    if (empty($orig_path_alias) && empty($orig_path_source)) {
      $url = preg_replace('/\/view$/', '', $original_path);
      // If alias, get source.
      $path_source = drupal_lookup_path('source', $url);
      if (empty($path_source) && $language_url->language != 'en') {
        // Alias can be from English but requested in different language.
        $path_source = drupal_lookup_path('source', $url, 'en');
      }
      // If source empty, the url might be the system path, not alias.
      if (empty($path_source) && drupal_valid_path($url)) {
        $path_source = $url;
      }
      $path_alias = path_load($path_source);
      if (empty($path_alias)) {
        // It may be a redirect with /view appended.
        $redirect = redirect_load_by_source($url, $language_url->language);
        if (!empty($redirect->redirect)) {
          $path_alias = path_load(array('source' => $redirect->redirect));
        }
      }
      if (!empty($path_alias)) {
        if (preg_match("/node\/[\d]{1,99}$/", $path_alias['source'])) {
          $path = $path_alias['source'];
        }
      }
    }
  }
  else {
    $redirect = redirect_load_by_source($original_path, $language_url->language);
    if (empty($orig_path_source)) {
      // The url might be the system path, not alias.
      $path_source = drupal_lookup_path('source', $orig_path_alias);
    }
    else {
      $path_source = $orig_path_source;
    }
    $path_alias = path_load($path_source);

    if (!empty($redirect->redirect)) {
      $path_alias = path_load(array('source' => $redirect->redirect));
      if ($path_alias) {
        $path = $path_alias['source'];
      }
    }

    $source = '';
    if (!empty($path_alias)
        && preg_match("/node\/[\d]{1,99}$/", $path_alias['source'])) {
      // Alias with source node/nid.
      $source = $path_alias['source'];
    }
    elseif (preg_match("/node\/[\d]{1,99}$/", $original_path)) {
      // The requested path it is system path
      // without alias for current language.
      $source = $original_path;
    }
    if (!empty($source)) {
      if ($node = menu_get_object('node', 1, $source)) {
        if (in_array($node->type, array('publication', 'file'))) {
          global $language;
          $lang = $language->language;
          if (!empty($node->field_file[$lang][0])
            || !empty($node->field_file['en'][0])
          ) {
            // Append the file_view identifier to be used in hook_node_view().
            $path .= '/file_view';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function osha_publication_block_info() {
  $blocks = array();
  $blocks['osha_publication_listing'] = array(
    'info' => t('Publications listing'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function osha_publication_block_view($delta = '') {
  $block = array();
  if ($delta == 'osha_publication_listing') {
    module_load_include('inc', 'osha_publication', 'osha_publication.pages');
    $block['content'] = drupal_get_form('osha_publication_menu_publications_form');
  }
  return $block;
}

function osha_publication_req_param($form_state, $name, $default = NULL) {
  if (!empty($form_state['values'][$name])) {
    $ret = $form_state['values'][$name];
    if (is_array($ret)) {
      $ret = array_filter($ret);
    }
    return $ret;
  }
  if (!empty($_GET[$name])) {
    if (is_array($_GET[$name])) {
      $ret = array();
      foreach ($_GET[$name] as $v) {
        $ret[] = check_plain($v);
      }
      return $ret;
    }
    else {
      return check_plain($_GET[$name]);
    }
  }
  return $default;
}

function osha_publication_options_list() {
  $return = array('0' => t('All audience'));
  $vocabulary = taxonomy_vocabulary_machine_name_load('segment');
  if (!empty($vocabulary)) {
    $terms = taxonomy_get_tree($vocabulary->vid);
    foreach($terms as $key => $term) {
      $return[$term->tid] = $term->name;
    }
  }
  return $return;
}

/**
 * Implements hook_file_view().
 */
function osha_publication_node_view($node, $view_mode, $langcode) {
  // For publications, the default url should serve the file.
  // if the path ends with /view than should serve the node.
  // see CW-1072
  if (!in_array($node->type, array('publication', 'file'))) {
    return;
  }
  drupal_add_js(drupal_get_path('module', 'osha_publication') . '/js/osha_publication.js');
  $args = arg();
  if (end($args) == 'file_view' && $view_mode == 'full') {
    $show_lang = $langcode;
    if (empty($node->field_file[$langcode][0]) && $langcode != 'en') {
      $show_lang = 'en';
    }
    if (!empty($node->field_file[$show_lang][0])) {
      $file = (object) $node->field_file[$show_lang][0];
      $headers = array(
        'Content-Type'              => $file->filemime,
        'Content-Disposition'       => 'filename="' . $file->filename . '"',
        'Content-Length'            => $file->filesize,
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file->uri, $headers);
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function osha_publication_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // For publications, the "View" tab should point to alias/view.
  $is_node = !empty($router_item['map'][0]) && $router_item['map'][0] == 'node'
    && !empty($router_item['map'][1]) && is_object($router_item['map'][1]);
  $is_publication = $is_node && $router_item['map'][1]->type == 'publication';
  if ($is_publication && !empty($data['tabs'][0])) {
    $tabs = $data['tabs'][0];
    if (!empty($tabs['output'])) {
      foreach ($tabs['output'] as $key => $tab) {
        if ($tab['#link']['path'] == 'node/%/view') {
          $alias = drupal_lookup_path('alias', $data['tabs'][0]['output'][$key]['#link']['href']);
          if (!empty($alias)) {
            $data['tabs'][0]['output'][$key]['#link']['href'] = $alias;
          }
          $data['tabs'][0]['output'][$key]['#link']['href'] .= '/view';
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_publication_form_lang_dropdown_form_alter(&$form, &$form_state, $form_id){
  // For publications, the language switcher should get to '/view' (CW-1413)
  $node = menu_get_object();
  if (!empty($node) && $node->type == 'publication') {
    $languages = osha_language_list();
    foreach (array_keys($languages) as $lang) {
      if (isset($form[$lang])) {
        $form[$lang]['#default_value'] .= '/view';
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_publication_form_publication_node_form_alter(&$form, $form_state) {
  // For publications set a cardinality (MC-223).
  $langcode = LANGUAGE_NONE;
  $form['field_tags'][$langcode]['#attributes']['data-cardinality'] = 3;
  $form['field_thesaurus'][$langcode]['#cardinality'] = 6;
  $form['field_nace_codes'][$langcode]['#cardinality'] = 6;
  foreach (array('field_nace_codes', 'field_thesaurus') as $key) {
    $field = &$form[$key];
    $field_state = field_form_get_state($field[$langcode]['#field_parents'], $field[$langcode]['#field_name'], $langcode, $form_state);
    if ($field_state['items_count'] >= $field[$langcode]['#cardinality']) {
      unset($field[$langcode][$field_state['items_count']]);
      $field[$langcode]['add_more']['#access'] = FALSE;
    }
    if (isset($field[$langcode][$form['field_nace_codes'][$langcode]['#cardinality']-1])) {
      $field[$langcode]['add_more']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function osha_publication_views_pre_render(&$view) {
  $jssor_path = libraries_get_path('jquery-slider-master');

  if ($view->name == 'publications') {
    drupal_add_js($jssor_path . '/jssor.slider.mini.js');
    drupal_add_css($jssor_path . '/jssor.css');
  }
}

function osha_publication_get_archive_drupal_path($files, $base_name, $dir_path, $drupal_dir_path) {
  $archive_path = file_create_filename($base_name, $dir_path);
  if (file_exists($archive_path)) {
    return $archive_path;
  }
  if (!empty($files)) {
    // Return if dir don't exists.
    if (!file_prepare_directory($drupal_dir_path, FILE_CREATE_DIRECTORY)) {
      watchdog('osha_publication', 'The directory !dir could not be accessed!', array('!dir' => $drupal_dir_path), WATCHDOG_ERROR);
//      return NULL;
    }
    // Check if it's enough disks pace to create the archive.
    $files_size = 0;
    foreach ($files as $file) {
      $files_size += $file['filesize'];
      if (disk_free_space($dir_path) < $files_size) {
        watchdog('osha_publication', 'There is not enough space to create a zip with files of !size MB!',
          array('!size' => $files_size / pow(1024, 2)), WATCHDOG_ERROR);
        return NULL;
      }
    }

    $pclzip_library = libraries_load('pclzip');
    libraries_load_files($pclzip_library);
    // Open the archive.
    $archive = new PclZip($archive_path);
    $files_paths = array();
    foreach ($files as $file) {
      $path = drupal_realpath($file['uri']);
      if (file_exists($path)) {
        $files_paths[] = $path;
      }
      else {
        watchdog('osha_publication', 'The file !path could not be accessed!', array('!path' => $path), WATCHDOG_ERROR);
      }
    }
    $result = $archive->add($files_paths, PCLZIP_OPT_REMOVE_ALL_PATH, PCLZIP_OPT_TEMP_FILE_THRESHOLD, 10);
    if (empty($result)) {
      return NULL;
    }
    // Return drupal scheme file path.
    $archive_name = drupal_basename($archive_path);
    $archive_drupal_path = $drupal_dir_path . '/' . $archive_name;
    return $archive_drupal_path;
  }
  return NULL;
}


/**
 * Implements hook_libraries_info().
 */
function osha_publication_libraries_info() {
  $libraries['pclzip'] = array(
    'name' => 'PclZip',
    'vendor url' => 'http://www.phpconcept.net/pclzip',
    'download url' => 'http://www.phpconcept.net/pclzip/pclzip-downloads',
    'version arguments' => array(
      'file' => 'readme.txt',
      'pattern' => 'PclZip\s+([0-9a-zA-Z\.-]+)',
      'lines' => 5,
      'cols' => 20,
    ),
    'files' => array(
      'php' => array(
        'pclzip.lib.php',
      ),
    ),
  );
  return $libraries;
}

function osha_publication_download_pdf($node) {
  $files = array();
  $nid = $node->nid;
  if (!$node || $node->type != 'publication') {
    return '';
  }
  foreach ($_REQUEST['languages'] as $lang) {
    if (!empty($node->field_file[$lang])) {
      $files[$lang] = $node->field_file[$lang][0];
    }
  }
  if (count($files) > 1) {
    $drupal_dir_path = OSHA_PDF_DOWN_PATH;
    $dir_path = drupal_realpath($drupal_dir_path);
    $base_name = $nid . '_publication_download_' . rand(10, 9999) . '.zip';
    $archive_path = osha_publication_get_archive_drupal_path($files, $base_name, $dir_path, $drupal_dir_path);
    if ($archive_path) {
      $headers = array(
        'Content-Type'              => 'application/zip',
        'Content-Disposition'       => 'attachment; filename="' . drupal_basename($archive_path) . '"',
        'Content-Length'            => filesize($archive_path),
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($archive_path, $headers);
    }
  }
  else {
    reset($files);
    $file = current($files);
    $file_path = drupal_realpath($file['uri']);
    if ($file_path) {
      $headers = array(
        'Content-Type'              => 'application/pdf',
        'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file_path) . '"',
        'Content-Length'            => filesize($file_path),
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file_path, $headers);
    }
  }
  drupal_set_message(t("There was an error downloading the file!"), 'error');
  drupal_not_found();
  exit;
}

function osha_publication_download_form_validate($form, $form_state) {
  if (empty($form_state['values']['selected'])) {
    form_set_error('', t('Please select the language/s'));
  }
}

function osha_publication_download_form_submit($form, $form_state) {
  $node = menu_get_object();
  drupal_goto('node/' . $node->nid . '/download_pdf', array('query' => array('languages' => $form_state['values']['selected'])));
}

function osha_publication_download_form($form, $form_state) {
  $list = language_list();
  $form = array();
  $node = menu_get_object();
  $options = [];
  $download_links = [];

  foreach ($node->field_file as $lang => $files) {
    $options[$lang] = $list[$lang]->name;
    $download_links[$lang] = file_create_url($files[0]['uri']);
  }
  $form['#method'] = 'POST';
  $form['#prefix'] = '<span class="title-download">' . t('Downloads') . '</span><div class="content-languages-download">';
  $form['#suffix'] = '</div>';
  $form['nid'] = [
    '#type' => 'hidden',
    '#default_value' => $node->nid,
  ];
  $form['selected'] = array(
    '#type' => 'select',
    '#title' => t('Publication'),
    '#multiple' => TRUE,
    '#chosen' => TRUE,
    '#attributes' => ['class' => array('new-select-style')],
    '#options' => $options,
    '#suffix' => '<a href="#" id="download_pdf"><img alt="download" src="/' . drupal_get_path('theme', 'osha_frontend') . '/images/download-ico.png"></a>',
  );
  $form['content']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Download'),
  );
  drupal_add_js(array('osha_publication' => array('links' => $download_links)), 'setting');
  return $form;
}

/**
 * Implements hook_post_features_enable_feature().
 *
 * {@inheritdoc}
 */
function osha_publication_post_features_enable_feature($component) {
  // After the field_instance ...
  if ($component == 'variable') {
    menu_rebuild();
    drupal_static_reset();
    if ($role = user_role_load_by_name('administrator')) {
      $permissions = array(
        'create publication content',
        'edit own publication content',
        'edit any publication content',
        'delete own publication content',
        'delete any publication content',
      );
      user_role_grant_permissions($role->rid, $permissions);
    }
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function osha_publication_workbench_moderation_transition($node, $old, $new) {
  if ($node->type == 'publication' && $new == 'published') {
    $destination = 'node/' . $node->nid;
    $path = path_load(array('source' => $destination));
    if (!empty($path)) {
      $destination = $path['alias'];
    }
    $_GET['destination'] = $destination . '/view';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function osha_publication_field_formatter_info() {
  $info = array(
    'publication_term_reference_plain' => array(
      'label' => t('Plain text (localized) for publication'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'file_publication_file' => array(
      'label' => 'Publication file',
      'field types' => array('file'),
      'description' => 'Displays default icon per file type and lists all languages of the attachment.',
    ),
    'file_publication_related_res' => array(
      'label' => 'Publication related resources',
      'field types' => array('file'),
      'description' => 'Displays default icon per file type and file description.',
    ),
    'publication_bookshop_id' => array(
      'label' => 'Publication bookshop link',
      'field types' => array('text'),
      'description' => 'Displays link to EU bookshop.',
    ),
    'publication_twin_publications' => array(
      'label' => 'Publication twin publications',
      'field types' => array('entityreference'),
      'description' => 'Displays twin publications as title and link to file in all languages.',
    ),
    'publication_title_linked' => array(
      'label' => t('Publication Linked and wrapped'),
      'field types' => array('text'),
      'settings' => array('title_style' => '', 'title_link' => '', 'title_class' => '', 'trim_length' => '', 'trim_suffix' => ''),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function osha_publication_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];
  $element = array();

  $wrap_tags = array(
    '_none' => t('- None -'),
    'div' => t('DIV'),
    'h1' => t('H1'),
    'h2' => t('H2'),
    'h3' => t('H3'),
    'h4' => t('H4'),
    'h5' => t('H5'),
    'h6' => t('H6'),
    'span' => t('SPAN'),
  );
  $element['title_style'] = array(
    '#title' => t('Wrap title in tag'),
    '#type' => 'select',
    '#default_value' => !empty($settings['title_style']) ? $settings['title_style'] : '_none',
    '#options' => $wrap_tags,
  );

  $link_types = array(
    'content' => t('Content'),
  );
  $element['title_link'] = array(
    '#title' => t('Link title to'),
    '#type' => 'select',
    '#default_value' => $settings['title_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  $element['title_class'] = array(
    '#title' => t('Tag classes'),
    '#type' => 'textfield',
    '#description' => t('A CSS class to use in the wrapper tag for the title.'),
    '#default_value' => $settings['title_class'],
    '#element_validate' => array('_title_validate_class'),
  );
  $element['trim_length'] = array(
    '#title' => t('Trim length'),
    '#type' => 'textfield',
    '#description' => t(''),
    '#default_value' => $settings['trim_length'],
  );
  $element['trim_suffix'] = array(
    '#title' => t('Trim lenght'),
    '#type' => 'textfield',
    '#description' => t(''),
    '#default_value' => $settings['trim_suffix'],
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function osha_publication_field_formatter_settings_summary($field, $instance, $view_mode) {
  $settings = $instance['display'][$view_mode]['settings'];
  $summary = array();

  if (empty($settings)) {
    return;
  }
  $tag = isset($settings['title_style']) && $settings['title_style'] != '' && $settings['title_style'] != '_none' ? $settings['title_style'] : t('- None -');
  $summary[] = t('Title wrap tag: @tag', array('@tag' => $tag));

  $link_types = array(
    'content' => t('Linked to content'),
  );
  // Display this setting only if field is linked.
  if (isset($link_types[$settings['title_link']])) {
    $summary[] = $link_types[$settings['title_link']];
  }

  // Display this setting only if wrapper has a class.
  if (isset($settings['title_class']) && $settings['title_class'] != '_none' && $settings['title_class'] != '') {
    $summary[] = t('Wrap tag classes: @classes', array('@classes' => $settings['title_class']));
  }

  if (isset($settings['trim_length']) && $settings['trim_length'] != '') {
    $summary[] = t('Trim length: @trim_length', array('@trim_length' => $settings['trim_length']));
    if (isset($settings['trim_suffix']) && $settings['trim_suffix'] != '') {
      $summary[] = t('Suffix: @trim_suffix', array('@trim_suffix' => $settings['trim_suffix']));
    }
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_theme().
 */
function osha_publication_theme() {
  return array(
    'osha_publication_file_publication_file_format' => array(
      'variables' => array('entity' => NULL, 'file' => NULL, 'delta' => NULL),
    ),
    'osha_publication_file_publication_related_res_format' => array(
      'variables' => array('file' => NULL, 'delta' => NULL),
    ),
    'osha_publication_bookshop_id_format' => array(
      'variables' => array('title' => NULL),
    ),
    'osha_publication_twin_publications_format' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function osha_publication_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'file_publication_file':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_publication_file_publication_file_format',
          '#entity' => $entity,
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;

    case 'file_publication_related_res':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_publication_file_publication_related_res_format',
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;

    case 'publication_term_reference_plain':
      $language = i18n_language_interface();
      foreach ($items as $delta => $item) {
        $item['taxonomy_term'] = taxonomy_term_load($item['tid']);
        $name = ($item['tid'] != 'autocreate' ? i18n_taxonomy_term_name($item['taxonomy_term'], $language->language): $item['name']);
        $element[$delta] = array(
          '#markup' => check_plain($name),
        );
        if ($delta) {
          $element[$delta-1]['#markup'] .= ', ';
        }
      }
      break;

    case 'publication_bookshop_id':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_publication_bookshop_id_format',
          '#title' => check_plain($entity->title),
        );
      }
      break;

    case 'publication_twin_publications':
      foreach ($items as $delta => $item) {

      }
      $element[0] = array(
        '#theme' => 'osha_publication_twin_publications_format',
        '#items' => $items,
      );
      break;

    case 'publication_title_linked':
      $settings = $display['settings'];
      $output = isset($items[0]) ? $items[0]['safe_value'] : '';
      $orig_output = $output;
      if (!empty($settings['trim_length']) && drupal_strlen($orig_output) > intval($settings['trim_length'])) {
        if (module_exists('views')) {
          $output = views_trim_text([
              'max_length' => $settings['trim_length'],
              'word_boundary' => TRUE,
              'ellipsis' => FALSE,
              'html' => TRUE,
          ], $output);
        }
        else {
          $output = text_summary($output, NULL, $settings['trim_length']);
        }
        $shortened = FALSE;
        if (drupal_strlen($output) != drupal_strlen($orig_output)) {
          $shortened = TRUE;
        }
        if ($shortened && !empty($settings['trim_suffix'])) {
          $output .= $settings['trim_suffix'];
        }
      }
      if (!empty($output) && $settings['title_link'] == 'content') {
        $uri = entity_uri($entity_type, $entity);
        $path = url($uri['path']);
        if ($entity->type == 'publication') {
          $path .= '/view';
        }
        $output = '<a href="' . check_plain($path) . '">' . $output . '</a>';
      }

      $wrap_tag = empty($settings['title_style']) ? '_none' : $settings['title_style'];

      if ($wrap_tag != '_none') {
        $element = array(
          'element' => array(
            '#tag' => $wrap_tag,
            '#value' => $output,
          ),
        );

        if (!empty($settings['title_class'])) {
          $element['#attributes'] = array('class' => $settings['title_class']);
        }

        $output = theme('html_tag', $element);
      }
      // If the content is archived, add a label for it.
      if (!empty($output) && $settings['title_link'] == 'content') {
        if (!empty($entity->field_archived[LANGUAGE_NONE][0]['value'])) {
          $output .= '<span class="title-archived">' . t('Archived') . '</span>';
        }
      }

      $element = array(
        array(
          '#markup' => $output,
        ),
      );

      return $element;
  }
  return $element;
}

/*
 * Formats the main attachment and show links in all languages
 */
function theme_osha_publication_file_publication_file_format($element) {
  $node = $element['entity'];
  $file = (object) $element['file'];
  $icon_directory = drupal_get_path('theme', 'osha_frontend') . '/images/file_icons';

  $output = "<span class='label_publication_file'>Download</span>";
  $output .= theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
  $output .= "<span class='label_publication_file'>in:</span>";

  $file_fid = isset($node->field_file[$node->language][0]['fid']) ? $node->field_file[$node->language][0]['fid'] : NULL;

  foreach ($node->field_file as $lang => $object) {
    if ( $lang == $node->language || $file_fid != $object[0]['fid'] ) {
      $output .= '<a target="_blank" href="' . file_create_url($object[0]['uri']) . '">' . strtoupper($lang) . '</a> | ';
    }
  }
  $output = substr($output, 0, -3);
  return $output;
}

/*
 * Formats the related resources (attached files) as icon and description/filename
 */
function theme_osha_publication_file_publication_related_res_format($element) {
  $file = (object) $element['file'];
  $icon_directory = drupal_get_path('theme', 'osha_frontend') . '/images/file_icons';

  $name = ($file->description != NULL) ? $file->description : $file->filename;
  $output = '<a href="' . file_create_url($file->uri) . '">';
  $output .= theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
  $output .= '<span>'.$name.'</span></a>';

  return $output;
}

/*
 * Formats the bookshop id as link to bookshop.europa.eu
 */
function theme_osha_publication_bookshop_id_format($element) {
  $url = 'https://publications.europa.eu/en/search-results' .
    '?p_p_id=portal2012searchExecutor_WAR_portal2012portlet_INSTANCE_q8EzsBteHybf' .
    '&p_p_lifecycle=1&p_p_state=normal&facet.author=OSHA&facet.collection=EUPub' .
    '&language=en&startRow=1&resultsPerPage=10&SEARCH_TYPE=SIMPLE&queryText=' . urlencode(trim($element['title']));
  $image_path = drupal_get_path('theme', 'osha_frontend') . '/images/content/EUPublications_logo.svg';
  return '<div class="content-order-copy">' .
    '<a href="' . $url . '" target="_blank">' . t('Order a printed copy') . '<img src="/' . $image_path .
    '" alt="' . t('EU Publications: You can order a printed copy of this document') .
    '" title="' . t('EU Publications: You can order a printed copy of this document') .
    '"></a></div>';
}

/*
 * Formats the related resources (attached files) as icon and description/filename
 */
function theme_osha_publication_twin_publications_format($element) {
  $related_pubs = $element['items'];
  $output = '<h3>Summary &amp; Resources</h3>';
  $output .= '<ul id="publication_related_publications">';
  foreach ($related_pubs as $pub) {
    $output .= '<li>';
    $node = node_load($pub['target_id']);
    $curr_lang = 'en';
    $title = isset($node->title_field[$curr_lang][0]) ? $node->title_field[$curr_lang][0]['value'] : $node->title_field['en'][0]['value'];
    $output .=  '<a href="' . url('node/' . $node->nid, array('absolute' => TRUE)) . '">' . $title . '</a>';
    $output .= '<span>Download</span>';
    $file = isset($node->field_file[$curr_lang][0]) ? $node->field_file[$curr_lang][0] : $node->field_file['en'][0];
    $output .= theme_file_icon(
      array(
        "file" => file_load($file['fid']),
        "icon_directory" => drupal_get_path('theme', 'osha_frontend') . '/images/file_icons'
      ));
    $output .='<span>in:</span>';
    foreach ($node->field_file as $lang => $object) {
      $output .=  ' <a href="' . file_create_url($object[0]['uri']) . '">' . strtoupper($lang) . '</a> | ';
    }
    $output = substr($output, 0, -3);
    $output .= '</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_publication_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha_publication', 'osha_publication.translations');
  return osha_publication_get_translatable_strings();
}

/**
 * Implements hook_node_view
 */
function osha_publication_node_view_alter(&$build){
  osha_thumbnail_alt_title($build, 'publication', 'field_cover_image', 'image');
}

/**
 * Implements hook_entity_property_info_alter().
 */
function osha_publication_entity_property_info_alter(&$info) {
  $info['node']['properties']['main_publication_type'] = array(
    'type' => 'taxonomy_term',
    'label' => t('Main Publication Type'),
    'sanitized' => TRUE,
    'getter callback' => 'osha_publication_node_get_main_publication_type',
  );
  $info['node']['properties']['main_tags'] = array(
    'type' => 'list<taxonomy_term>',
    'label' => t('Main Tags'),
    'sanitized' => TRUE,
    'getter callback' => 'osha_publication_node_get_main_tags',
  );
}

function osha_publication_node_get_main_tags($item) {
  $tags = [];
  $map = osha_publication_get_main_tags_map(FALSE);
  if (!empty($item->field_tags)) {
    foreach($item->field_tags[LANGUAGE_NONE] as $tag) {
      $tid = $tag['tid'];
      if (!empty($map[$tid])) {
        $tid = $map[$tid];
      }
      $term = taxonomy_term_load($tid);
      if (!$term->field_tags_code) {
        continue;
      }
      if (!$term->field_tags_code[LANGUAGE_NONE][0]['value']) {
        continue;
      }
      $tags[$tid] = $tid;
    }
  }
  return $tags;
}

function osha_publication_node_get_main_publication_type($item) {
  $type = null;
  if ($item->type != 'publication') {
    return NULL;
  }
  $map = osha_publication_get_main_publication_types_map(FALSE);
  $tid = $item->field_publication_type[LANGUAGE_NONE][0]['tid'];
  if (!empty($map[$tid])) {
    $parent_tid = $map[$tid];
    $term = taxonomy_term_load($parent_tid);
  }
  elseif (array_key_exists($tid, $map)) {
    $term = taxonomy_term_load($tid);
  }
  if (!$term->field_main_category) {
    return null;
  }
  if (!$term->field_main_category[LANGUAGE_NONE][0]['value']) {
    return null;
  }
  return $type;
}

function osha_publication_get_main_publication_types_map($parent = TRUE) {
  $q = db_select('taxonomy_term_hierarchy', 't');
  $q->join('field_data_field_publication_type', 'e', 'e.field_publication_type_tid = t.tid');
  $q->distinct();
  $q->fields('t', ['tid', 'parent']);
  if ($parent) {
    $q->condition('t.parent', 0, '>');
  }
  return $q->execute()->fetchAllKeyed(0,1);
}

function osha_publication_get_main_tags_map($parent = TRUE) {
  $q = db_select('taxonomy_term_hierarchy', 't');
  $q->join('field_data_field_tags', 'e', 'e.field_tags_tid = t.tid');
  $q->distinct();
  $q->fields('t', ['tid', 'parent']);
  if ($parent) {
    $q->condition('t.parent', 0, '>');
  }
  return $q->execute()->fetchAllKeyed(0,1);
}
